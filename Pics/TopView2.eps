%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: figure1-3D.pdf
%%Creator: Adobe Acrobat 11.0.3
%%For: Administrator
%%CreationDate: 2016/2/24, 15:33:02
%%BoundingBox: 0 0 398 240
%%HiResBoundingBox: 0 0 397.0964 239.3502
%%CropBox: 0 0 397.0964 239.3502
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 942 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.4-c005 78.147326, 2012/08/23-13:03:03        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
   dc:format="application/pdf"
   xmp:CreateDate="2016-02-24T13:16:41+08:00"
   xmp:CreatorTool="Microsoft® Word 2013"
   xmp:ModifyDate="2016-02-24T15:32:56+08:00"
   xmp:MetadataDate="2016-02-24T15:32:56+08:00"
   pdf:Producer="Microsoft® Word 2013"
   xmpMM:DocumentID="uuid:2f1b5562-5ce3-49a0-8593-f9deaa883073"
   xmpMM:InstanceID="uuid:4ec2f195-1d3a-452a-b535-b8c74405d1ab">
   <dc:creator>
    <rdf:Seq>
     <rdf:li>Wistaria</rdf:li>
    </rdf:Seq>
   </dc:creator>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -239.35 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 239.35 li
397.096 239.35 li
397.096 0 li
cp
clp
gsave
-.708183 239.714 mo
397.292 239.714 li
397.292 -.286015 li
-.708183 -.286015 li
-.708183 239.714 li
clp
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: HETXEE+#e5#ae#8b#e4#bd#93-GBK-EUC-H-Identity-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
%%DocumentNeededResources: ProcSet (CIDInit)
%%IncludeResource: ProcSet (CIDInit)
%%BeginResource: CIDFont (HETXEE+#e5#ae#8b#e4#bd#93-GBK-EUC-H)
%%Title: (HETXEE+#e5#ae#8b#e4#bd#93-GBK-EUC-H Adobe Identity 0)
%%Version: 0
/CIDInit /ProcSet findresource begin
14 dict begin
/CIDFontName /HETXEE+#e5#ae#8b#e4#bd#93-GBK-EUC-H def
/CIDFontType 0 def
/CIDSystemInfo 3 dict dup begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
end def
/FontBBox {-8 -141 1000 859} def
/FontInfo 4 dict dup begin
/FSType 8 def
end def
/CIDMapOffset 57 def
/FDBytes 1 def
/GDBytes 1 def
/CIDCount 28762 def
/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def
/FDArray 1 array
dup 0
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 7 dict dup begin
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
def
/GlyphDirectory 34 dict def
ct_GlyphDirProcs begin
GlyphDirectory
+
0 <001C60D8A8C9B5EE31F4> |
1108 <001C60D8A8C9B5EE310DFF66D554C91AD0683705DF119FC3BCA18A05E8
CAE1C3764425A8B8A6E0BCC690F3BA9E35E4B4DA0AED3B4463A3F00B9D297B26
E567D36781327DC2E74ED57731428B06362232C13BA12FF2CBFB9BDF032247E5
43CE3DD422487F834F7823A9F787D127DD54E457A13ED5AD8609DE5BBB269E17
8D55BC15CF44188734BDA9A494094DD4662158F09A05607E1629B96C1AF06E11
21FDE802EDB4F5FEB4B88FCBD567C7B916214AB3CCAF3668B64CF872A306F891
0DCB9332B6F59F5C1C5EF16BB62F92BD27F880575DC4DE160ACDDF0B70B5050A
1EDF03AA518894532583D92C94F7C13B57B71514BB4362C32C5AC97049A1AEDE
BF2E5A5E7C5F0E92C85DF25B3295D85055974A54567760> |
1114 <001C60D8A8C9B5EE3102961D9AC399770DEF411BB0D849FDA0F55A3EC0
65A17358A8523CB7084928FD31893E2F4E7D74D06C7DBA1F9DDD563CD986F9E2
90CD60D6EC58B51B261BA7CA9BE1CED16154A1F9C397C37461421ECE1ED35F0D
62CB5247ED5010DC37A80F5ABA15CD6DE93E932B0ADEBE3C35737CFE05509494
0F> |
3374 <001C60D8A8C9B5EE3100B249FE0972A1F213DE61D816DF1EAF23D42C08
0F518464B0E4071F77D6D6C42850EA4633881E106039D3E5A058ED2E3DD0406D
3DA23BCA01C13DA71313000B2116426CB411C9FC6BB7B4FA24746768B674FA67
17855C6D6142877D76C6C185231486C955453B5AF7550FA207164965E9817C74
E33F1ABF49998B1F6AA4E12B4726207884CB0435651AC11653B8400FC289A148
9C0A6E0F42ECE71ADF038302AF93C1A7D753E77EAAF8287678A1AF7EAEAAC6FB
04B751A6BB46E8AFA932D1BA07CBFD91820C5ED06F5C5F73DB7DD9D37D91F667
B2BFB6763DDA172F028EE8274FAF55E6F3B990DA4EAE953B08E9062E1F8AA65F
444AA40FA0865F2EAAE82CEF4A058CB789DE6BA9DD4C7A5D8D5346FAD43908B8
A1C2406C1CDBC2BA> |
11444 <001C60D8A8C9B5EE31023EA36A9FB9EE2C219ABE16AF6E98A7F367D70
9BAB068D02B24D63340F410693C034CF5BBBECA200710170958DB600C4C999E1
05001B2BFA4B7A0F55B3CFDCB20B02C5CDEDD0BD3D4822ACB3C3A6B0A316685D
8CF51742A5A3B0B5BB01743954FFEA07DB62AA948E8DCB0F399F3F0050E67826
2C930A2EEFFA173A3D4063CF42CBD1C9336168A104098AE2979E5954AA83057D
8E7C62401CC0D869A5A63418A5F009EF25398270F31F2C3873A5BC2C86AE252C
75C00D85F58E879895BE629E8544187805AE2CA1D3CD18A971146FBE5CDB0E2B
501F80384737F37603FAC267E78D12AD3DC7638CE9AFD4B6136A9E3C02C60362
BCBDA6F8CAD317A3180BDE6BEB563209B4F7E6CBFB4F8> |
12487 <001C60D8A8C9B5EE310327921E19EC2CA5F9AE688C60C02F229AAAC1C
D565168BF8ACC0390D25EDC30B5CE85040846739C03E6D35E75458C4007542A6
1A770133563063670D8DDF8A20F1A6AC26FF82B59F88B7DB6AC9B6D94A3FC635
1DB41943131093FE75D7098F13B4F27839F016A725871A29580D47935CEBD637
859CD87B8937A1F2CE46E964B3D08CDF48C9CB2FC97DF26A9D602DDDB6EE480D
7987F040D000FF4D53CE5EF8ACD76F08B2AB45216DC3D77F1838D5F4F23A258F
09A00818FF2996E5BF7FD850DC4A566C6809D5F9EAFFABC116C84E7F4A0CE04D
B5A05733CCE31E33756C7124D9CCECFCDF8D43BEEEBF221421DADD577D3E50A5
26F20645FE496E3265681F69A01C3C7A4D67FB7D29E95359E2E6D0FF75DEC4CE
440C102884EB73ABAD5D91125FA232BF719196D03007B1BD382F741F1CD466F2
81BDAB38970A456862706DF0B180F4C0CED20DF0415F1F5F53D171B44F6508DE
DB9E05C7C97B62CCD9194BC9CFE24C8CB413A2150D03C6CF44EA7300E568F93A
6D616512E3E7FEF5F125CDC8A47E975018FE0F27B448E25D2353A01E3F829BCB
111EED7B1131280E118D032307E7D1E190E4FDC03785A5E3A4F511D80179CEEC
F177519D1FC6EF835AE7D> |
2579 <001C60D8A8C9B5EE310337A891C2D47E2711CF26560A417EB40B284B8F
541C41D98DD9CC89810C7F6AFA663CBCDA046C1B3FECD657475A00CBAD5868B3
72B1A1290AEC9493091530C8A89195A969F828F00702> |
18078 <001C60D8A8C9B5EE31039C3AB8F10CBBDC0CFC0ECF76A7739404A6AA3
3FD684620BEF527F896B6E8BC484501B8F24B207F535CB217D027CD9C3C1B5A6
F766A04353DCC1750E3233C0954A5F2172D14440189B3768D4D677A13A591AE4
F8E39A76641BA520F28B55228FFF4EA60E81C7C27A36DED7BA6DB89191C6E2CC
F1DF5C533689B311DD06A21904BE89AAE7A509C3F2603F051C77F5F30F22A3AC
04A2BEBEE83C455EAB59A44FC77A9DBE1059FA5ED53C39BDF06BFC06B282E56C
3D956DDD7837760C436E34B0536B7F191F623BF3439057F07BAFDEB2E60E6FC6
BD31055B728DA49DD6E9A79E34D4AC997588F283B90047D3472A00F31F66B16C
CDE50C12A1EFA657EB72EE2AC7422368B28E303F6536B4C1984032911553540E
448EB17A0301B0688ACEB13E7957EB7F3841369B61EE97BAE54FA80C7A458940
F1AF13E55E3142C5D71CE4DFA6F033DE0E3BCB6A50612B87F9256D9B33AAE3FC
A5465F96B68DB817F8A568705DB375E37BEF4811CCE6F997BE52BFE4EF7C7748
E44B28D574F625F8CFBC1BBD3FA17471C5E02F70B05BB730F170CD816D18F7C0
C6BAA6258861B9A27B941D284ECECE946EC3C046E2B55DC1675523BA2DBB702E
99EB688D15C25F4C38368E82BF5CA30180D68DF65FDB1C2DF3423AF77F33E41E
601475815698FDFEF2C314B5B05CABA2DAD32F92B6BA76B961C33DBA8042E32A
53FAA85D155DD8DFDC62C57DBE61428C823654F3BCBD9CE3E4FA330EF1BD6723
77D43> |
19555 <001C60D8A8C9B5EE310342C9EBF86773910DB33E37288C367DC3144CC
C37255265199B5A1F367ACF9BEB08DF0B21E175E83AAF9C57E50D500D59A5083
456DF251E860A8992B489DDB4A6976139668A10A834B4BDDEF1F061B929A8245
4E0378A1DC234AD9E37657DBE70BBD96F259D11A2E5EED216192A1DD09E8A235
899D49D741D76211E4D205E0E0CD937B1CBBE7FAA96C4CC64F1FCFB0E4665688
302CA9ECBB7B880CB51D2BCFC83FDC4C7A8C2239438576C90504BDDE0C402CBE
AD487EE707425B640C3EEA52F8CB3C7A12B2C4CDDDBCDEE1B2ECA6D08E94CB0A
72CD2> |
7599 <001C60D8A8C9B5EE3103000071BFF41D544167328C40CD6CB8B7D1D64A
35C8BF28CFEA49FBA3818F2E6436B46F5E4FC60936681522F0F1565308F80252
D08E6CC8DBDD5D331FBB51D12EAE0D15CF76F12E6DA1DF595DCB19662B586F3A
0D2BA78921854CCACB53825D9ABECDB4D524A725823E6938FFD88F789829AA00
459730E39AC126F0E114DA6A6B57C71BECB1028AE7B50B37711C8F21EFE125F8
A58B76F5FB7A7B7DFB3DFFF1B4B60516A2E9E1479C85E6F44860A9492E491BC9
7648FBF198007CD64BE1229EED818A2647F72E945745391859B9F9B7CD5C5E5E
7A63BBE17F1E4B203C01EB9F00DFF34B7C28C075E9C7EFDAF5B0710D860AA0C9
1C82A210D4A6FDE3E0273B214EB642335552B9D2E96E34CFB9954F3B07DD6776
5282B7E471675D0257AA0476113156558FA3263327BD6490B395F9F87E30F734
356DA2> |
1405 <001C60D8A8C9B5EE310D9DD4E182C5BA4235DC30CC47DE7D2F8A1664C1
4B38D725273C4E490357C6E57752721FA05B60A4A97147265236A06B398518DF
0172C14C7EF73E6C4E4783155D0902678A0B532A482F4A2F49C3A58E67E86651
491A019192E2D62E3DD81FED26A295EDD4FD18C1C0D50DA5AD37E9442E1DA2D3
8DE0338E1712B365835BF3B6249BA7214BE0960B0737B4F8B5CF8438FE02FCC7
118E4B4FFC81278D9C08577F10211BC67C85CC1D91DE22754032A8DB1DD7372F
9B904D46E7AAE6746320EF41613C6D272FD4EE0501E71DB46837A4167777584D
6F909ED5D4D7C0A7AEEAEACC2956DA6CD2EF735E100279C3D1E53E5982B810B0
A207B09BEE6EFEF6AEBC56> |
13726 <001C60D8A8C9B5EE310236118134B984CCF7BA63AAC2756775A28F4C5
3B0D8D2139CF0533ECEC22B064446B6F833199DDA9110EC6AE20B59DDD51E62D
9137C0280E34ACA5CC1D1646DD23DF7BE4D1340FA819BDDF4E3D992F24A32E50
FA77D7D64D763C3E352FB89BB61C8CD61BBCD6CB9A15FFB4B0C4781649535058
98D8E9110A9E2E4E6073CE867CF1BC15E7204EBA82D7A3CAC16EFF01EE13EB01
07AF387B796B99E668F5147664B64C8404BDDB71A992231AB04E7EA33EC17684
F9545CF875D9227BFAD957B10EDAE169081F17F783E9C3D72E96B0E842243197
6A37D3A822E9873D4E7151C3EED32CBC9046712182FBCD14BCD6748BE127248C
67D51FCE55E57F6A2C1BAFBF88726281A0DBB23CA> |
1085 <001C60D8A8C9B5EE3102F642ED596089D14669BE1C7D8A2BAC6DD4EBF3
B02E1CBE6357DA76F6B90E1D0CCB284CFE90745C8E6445D761559FA701DE838A
F05644E6E601AAFFF5FC70B665FE2024620604D11D33D325D8E28EC153057CE7
D2EAF81F49B999660B2C0EEBD6BEDB2C5F64C12B40826E19F64309E9A928F4C1
C3DCF6D79F6557CDEC2EC6C0FA999E9113DEBD60F2E1137B48481A262C1835C3
B09D> |
2620 <001C60D8A8C9B5EE310DB639BBC38E34C67D1789E07D376AAA2BFEAEFE
EE6D7301AB2E3B08E4CC2EFA7AB581F02E62FDE02AFB308A800BDB75ABDB600F
B4BD23197C05D8031C2001223E487CE642A24A4173DC9749EF7DF16DFA8E0C1D
22BE457A7898808F2ABEA896B818E0FF8D974D9BE2EEBB362E641487FACC15E7
D4577825A7EB81EFC0BAE761E67F27BAA8035D99C8966CA33392A20B8628635E
F27592A1E338DC5BC90F58EA768C146BB6B2CEE0798A732368CAA8387B38F3> |
708 <001C60D8A8C9B5EE3103BF0CF9C90B27C7418D73AEC3724353C301B4F95
5A3AFBBE53C0836A80A54A7C7EABA491AD7020B7047AA350926C74431CC86A1E
EAD0ACEF1E6ABDF84AB3DCCE2F607EB04A343EFC2C9F2FF7721D14D34CB8778A
B708BCA01D75D> |
1072 <001C60D8A8C9B5EE311F6B2C8C987F238EF28D232EDB52D11ED50A38F9
48F93F5590> |
3416 <001C60D8A8C9B5EE3154A7230CB053DBFD0532A751AB34F9DDBB53C6D7
8DC8606BC3C4B7A43A487B3E78C5B3C8E7650C59BCAE98D3D4E3D536E0276EA8
F982E66F99CFAC1FA98F625561B5C0D245952E78150F3870ABEB114EA2F8625B
C0032501E2F79C7126E4F263475AFFB4F0B26F4CA3CCA5039E989B9801D462B0
603235329A1A47886881B17049EE50C25F322F96B1CD35FD224BA012E2A409A5
8A25831D8369DFAFE327AD6EBE8EEFFD7FE75DCA779DAA49287EADAB5F7B7B48
D529E747CE7555A0732B7A> |
1082 <001C60D8A8C9B5EE310273E1573AA3540BDF74783AAC83340C37EF8CD3
57DFC3157416C940EC51CA66ECA91972E9A22E663DD73BF9438F04B34492326F
A34AF86CF0A63C0B3D994A16ED88> |
712 <001C60D8A8C9B5EE310D16C9BDDE67CCF2E7F7F1335373641ADDC8E48C4
BD3315F1731506CF5A4DDDF48AFBFF21A2F093311B104EB9ED655AB55377118A
205E08BD91D637D4E86F85986ABE22223468E767986F984E65AFAAB61557FF77
75E69CE20D37AC884E85CCF331105C5C2FAF6A8> |
1083 <001C60D8A8C9B5EE310E273688D5967564A4F33CECCD047C96E15EDBAB
81F153A61C36CBFBAB190133E34A3A1A4B71EA71DDD04917B19CD50108E8C813
614F6BF0DB4896C9E1F710E9BADF9FF01F3D643EF4138D22D2DA0B3613FC38C1
B12D9530F13A0291683190B79FD1> |
709 <001C60D8A8C9B5EE310275428E0ED5099F9F1E8D088CC64B9C725348739
C9FD3403BAED6A799C66E9AC709C6D22220A676D21EBAA12AE2454955AA4E066
78B98718C8DDE28F13064822D5FEA4F3D7A01387060106777632C0B3BBBDE050
E75FCB383E714> |
452 <001C60D8A8C9B5EE310D8487AE9E50554812AD8F12B105E9532874344ED
6989280DBAB739DAEC25DD55D89E4DA5E7F4D33FC9A4AB0E0CCA2FD3704676FE
9221649CB7D1162176C22CD00245DF2C968C974B57DA688AE984584148B7CCDE
8B61CD3ABA7CC4B0487B8B754A98BBDC4D2EC67904EB430BA9182FA4C4AD775E
3BB184F7533440CE18359691D193D47560E1F4C52CDF8393F16CB7E> |
4018 <001C60D8A8C9B5EE310087FC1515D764254E02BB59508118FD0E251BAD
97C041D0F794AC2D8ADC2345E5F99AC0E29852057F2CBF432A48542A63EF93DF
52EC6720A51906D9EFB399C544165FCDF0EEDBCD75A0F1F17164F1A205151F57
041A0FCADAE27473145BC440DD0382B0509F8DEFCDC5C02AE398A326F9B6C70A
8DB1009DDDC1DF0AF71A2F08530924844783AE142CC3C24650338CD86B8E5509
F62F8B39F594CF60EC761BF5DC8F195B91F5DDE5FC06B51E9A9E33F3B8C541C4
8BC1C8EA9F5A8D727551BC4AC9382CD596B1AF486BAED6404ACC430CDD767804
0279848663641BBAA42E47DF1B13C6B01FC4E17CD3C57F5A> |
7628 <001C60D8A8C9B5EE31025C75FF1B56FF214E2004CBED43F811B3779DB6
AC7B60BEB860127315990BED33B797B3094ED0AF3CD5D4A09F99768690DA482C
8430BF6957132D2960B45928C5521758718C863CADEA76870E0D905E7717F9D7
3162BC398A27F60598F2EA337DBA8A052362D63930A313D608BB74587272DF10
304B5A56884F37D9B01C215B4F49E381E0CEDD4C25F2C066D805F4E78FB8D5C3
DF234D03B1D76056527D515978D531E52EFE701161D2F70C8B631ECE3D4B51D3
6D66CE6C25DC1745C9C478E45F725898809AE1DE8C7986D2D36FD8DC504C3A94
20018F88EDF61E77F0> |
4649 <001C60D8A8C9B5EE3117D90B65A5F5982CB071F3902903F002B64072B4
894123B370B1BFFB6D31F5D85716E5106AE524A7EC75A2CD9CCFCFB8B2C5E2AB
7719B91D3854BB51D252873C7236B38B5DF0C30590C9C02AB0EE6B2409D0F3F9
F739FF0FA6CFBD9AE3F294547EC36DF55D83F5FD603B199F19A0952F1353141C
AAB89DAA8849B61E904F405D3BD59B1591678886F403F7801EDC8469C1CBF0E3
7C014DACCA8D8A4859F8334F74CF2BA6898E3F81849A398AACA1DA3DAE8215CC
76EBBD88B20B336D066E9E0CFF237D88580EB1D262BC0251E8EC5C76BCFF8727
1F27988A3FC32B43F6D9722C22D1D9578792D7D437CF556C37E03F1B44AA9CC8
3912DC92767BF4B2684CF71FC564504181D61ED1DEA8A80F6F2D> |
20172 <001C60D8A8C9B5EE310D43FF46B30E3E2C54749622D2835C4511430AB
CAAEB98F869463F4CE78557EAA173F7260627D4AC087412707D717E038789BE4
267FF67C1D77BC9DFF3400537770FA8B8252774038DF03D5056BC10C853451DA
0B448BD10FACD7A73D87F8138271656F7BBDD324B2C60B2BA4525610EFAAEBC3
3A92DF187AE5925A6B8582A3F194CBCFF03DFFC1C32D353A3F51FC3BD42AE49E
3D3FF9CCAB22B7D2BA35006DB569D5E187B00F20DE8594A6C87D42F8C122ED93
4633A915CD2178748BE3CC98EEF322F139A49231B30EBEF6B0427EE50CDE7B19
F36A0D5C165BE5FBE1DEF995484E00A28359921948FAA1FE428AFD46427EB9CA
4CE2A41BFE2DF8AB78ECA82D7B69E678B64B5A17429F6DB35F0C21357DCBF2BA
E4A1C490D3D872C764E4213B9D43AAA578F4CE163316D4849238236057F77A36
4E8D76AD6F93BD3C213C0179ED2D56D11C3C53F1248EC08E64941BC726D15F53
A64172B10415D270F68C2DF7D5320DEDAA191DAE99CA3DC67374A7C327DE4E8B
00083344C74270E6FFD98889E22B94E8EC361DA1093DC7A0BC72F8FFDDE2BCFD
F237CD34D0736E650F2AD4215E929C7516FC690A6A6C9BC5DD3A11F9DB6CABD4
51BA8AAAF996C21BD442B23B77FA88CA037D7A6B282243A37DB2ACC182F11AFC
31F4A71B3A3ED1C6413C4A4781FDDAA5D3F3308D0D352370E74044C33B6AFAC0
9F291BFF49A881AE5A9314E12DA> |
14498 <001C60D8A8C9B5EE31038988B0EE31F2558F420F3714CF83ECC69B312
BEAD758EB29DBC168BBD20146CEC6DBBD739ED5BA49DDFD5EE2C12614290959C
A539FC6A4FBF512994E22356CCE1DCF641E0DB15B505020A2D68E4A3BF66368A
E9841954F23FE677943B234ABB1BED7D78B2F38EACE521360215B4914641D71A
CDF058A7180D35FA731F9AE25A8092DDBB5B1D7A5C1D6AA4D8830E7A1BF3FBD1
8A6C5BC89B88E44CBBFE75F8210F5C431D44669A217E12B094F6ACEC72B9F1B2
8AAA43A60C2079706B8994BA064133F0C061DD4059E2187EB61> |
7481 <001C60D8A8C9B5EE3103A8976BABEC5B9C8FB8D09F7CF58DD37A569B5B
7A052DBCD016EC9A3B53E0B44C47F85DF90DFE3AFF5752A1394F6C42DAD47C95
C61151C08B729A9F4D1F2829D9327A42BD3BB29BD61CC5790B5624CBF6F37972
4032E1E86B2B80DE591C20A233712B2776B8E4CF26704274B6BD89C0C0785B7C
08FE45DA9B0D3F87A51D7431C9182B19F04C842BC08A024693569CAD293E825A
0AEABEDC9F5AC72485873E6DE5C69C6A889607465A9F82670E82C913A478> |
16305 <001C60D8A8C9B5EE3102E391E92D6A22A1065EC3B1264E56F79C659EA
C99C781D55B01B36EB7C47F17B7F98984C38396848DCE8FCA6DEF7AF2B5611EA
DD3EA0E67DAAB164CB204EBC7FD658C519DC930F60ADDEABDF5257361368045B
E942C78CA18708708E496829F867FEA17BE52AD1978ADA5631997D42A5EF32FF
C08B70BECB15E8FC34D91F236C118E76089EBD8A664E71D5704303B5F78D3C5F
D57F89D2D440A4A386E4A76250B05EE302A3B369F3AC52988214FB8F8A3C2E3C
85CC5BFB0E12427F605D345754182C52DD62324C8B465C7A1EF94D372ED36CF1
68252089F9545DCAF3BC45DE0DAA526188DF2AD7B76A559BB5A05094AB4A93BB
E7A6EC8890D000C3A7E917224C8475CC8E7A0F5481FEEDC1F1579376F92B8D14
F91606E101720F56BD98A9ED5482FDCECF3E2CD0B84C1B8A44043535B7C2A> |
8818 <001C60D8A8C9B5EE3102C490906AB1005BC50FD46C222C5B31446769E6
1FC135EE0D4FF7A7ABE30F2002EC9AD6669F1339A766E1A0E8729B7AA2096D4A
671E6F66EC76A805E1884AFD9F7366CF3832D757E58A804CB659BEC40695F6A5
2F16BB5EFCD46269A8CB44CB641B6F13B02BD08075EF281BDCCF0889359A8AAB
8483FFE9F69D1F2D043472A5676BC90FAF72AE371F4B9E6BE6628E3CB88B7EF8
286606CD3C3EA6B51A7391454B5AD51E5C6710800D7785CC385D82CD59470217
08F45A52CF8E691631FC07ED17B77A5E5F46B434EF9879384575E07E6567BA94
1A7EAEA037A74AA749576D744187BDDCE58130632DC087D4025374D9376AF43D
C17958C7BD23E6992A85525D1D30FADF5B678A947BB2B9DD7F6738432581F466
B75AD3> |
2591 <001C60D8A8C9B5EE3127FF767AC7A8446C8CF7F14221E81A8554D9BD82
80A0C86365BE4CEFC1AD965DA82B9E0857F443563A0ADCBC5F1396FA8DDF2BB8
4B5EF91A445A7828F4841D4F7226FDC462F00A1CDD509D200C77D24A05133175
FF248BD64002BA131F187261C43EEB5D93397824E1CDEF8C8EA89E491C94DA88
D1EF57D184978B397EDD6F808F6795D74F8B> |
1301 <001C60D8A8C9B5EE310D75AE6FA3AC6BB68830CC4DFB00117FAB4B5A60
F684ADB4000CD9B4580BA16ADAF9070657EF119341B0A12FA95015864F64341E
55FBE3899A67C6BA03A3C36CDDC728D5ED33A9EC5C5D5F8E4607F7FF21AF7156
A7F9B08FB620078048D0983243083A0703C24A49C4622544896CE85B0181298A
82135C65791616F001267FFC8D0BCC312677FA1EF3186803A1BDB936017FC159
9B1A3866E430D18836455A1EBFE0B864866D96BF57B4EC84061E91FCAD4C7C70
D8BEB5D283B3A506B3470A5FF834C68E14BE55B3B503986FF28DFDC89D39F438
5DEDAB6ACB> |
1981 <001C60D8A8C9B5EE3102E31F8B76C7FDA3C0E4233C7538D84A9405D8B4
5CCD2F60124F574129484943A53632879868B9DD126B9F508B33A833E2F59C68
2B977CE5E588BB1693C92B6D78825CDB9613A64EDEF0B6586B48F666FFB7D07E
00A329CF739DCE6E692E8E7DDA4F159B32E36181F535BF1AC2BDEE1E408B99F0
4702C95149AE7DA9427147E140CCCFD8659666112707FBA6E0BA5F49F5E1861B
7FD97DF583FFB4380B3974A7088403D48972CA0AFAD19C2CFD896BC67691BF53
EDA7F66DF71FF870F3A32C7F616DA10D1B15998FEA> |
7017 <001C60D8A8C9B5EE310254E0CC86CCE62E1002EF0D034FA4D5D667FC63
B1C342EC60F39E09D50CB8F91DBF593369B7D025F7C0065A5F4E05A4218C3DB7
A37C4FB65CB9C8DC36FD75D668D1312F0089DFB4D5FA6949AA39FB02376C8608
F71465D525AAF34EB9B084AE7D5B16BD7B196C98FD2B32C5E00604F8074903C8
419FE9B54ED30017E92368248FDB73B4BA130E6874F1B1722F4DC1AEBA964901
FAA19C656EFEBC0BFF10C13B8416778AA289A879656F6E0F225BE89C7890168A
958BA3444A6D2D4CF1A9838E7A3AE20BB7787B799233F36C7E67AAEDA4D0DD8A
D4AB7D8BB11BBF5D51B0F71A16C3AA96> |
!
end
ct_AddStdCIDMap
%%EndResource
ct_restoreCIDInit /HETXEE+#e5#ae#8b#e4#bd#93-GBK-EUC-H-Identity-H /Identity-H 0 [/HETXEE+#e5#ae#8b#e4#bd#93-GBK-EUC-H] ct_ComposeFont pop end end
%ADOEndSubsetFont
/HETXEE+#e5#ae#8b#e4#bd#93-GBK-EUC-H-Identity-H findfont [10.56 0 0 -10.56 0 0 ]msf
2.31581 -8.54602 mo
(\004T\004Z\015.)sh
33.8796 -8.54602 mo
(,\2640\307\012\023F\236Lc\035\257\005}5\236\004=\012<\002\304\0040\004Z\015X\004:\002\310\0040\004Z\015X\004;\002\305\001\304\017\262\035\314\022\)N\3148\242\0359?\261"r\002\310\012\037\005\025\007\275\033i\001\304)
[10.56 10.4438 10.56 10.4438 10.56 10.4438 10.56 10.4438 10.56 10.56 10.4438 10.56 
10.4438 10.56 10.4438 10.56 10.4438 10.56 10.4438 10.56 5.28 10.4438 10.56 10.4438 
10.56 10.4438 10.56 10.4438 10.56 10.4438 10.4438 10.56 10.56 10.4438 10.56 0 
]xsh
%ADOBeginSubsetFont: HIBBAA+Calibri Initial
ct_T42Dict begin
-0.5 -0.305 1.238 1.023
 256 array 0 1 255 {1 index exch /.notdef put} for  /HIBBAA+Calibri
Type42DictBegin
[<00010000000c000c000c000c4f532f32f9dcd511000000cc000000606376
7420b09bc4d20000012c0000051c6670676df6f64d0c000006480000091a
676c7966440e75e300008f5000000b3668656164ef1102a100000f640000
0036686865610dad0c0300000f9c00000024686d747837ef07da00000fc0
00002fd06c6f63611aac18c100003f9000001e4e6d617870213324cd0000
5de0000000206e616d651dac718100005e0000000d3e707265706baf02fe
00006b4000002410676469720000000000000000000000000003042b0190
00050008059905330000011e05990533000003d0008602000800020f0502
020204030204e00002ff4000acff00000001000000004d53202000400000
1d390600fe0001c4079e02262000019f0000000003b7050e000000200003
0000079e0000fe930000000000000000000000000050006a007300800080
0086008d009300bf00db006200830093009900a000a600a900b000c100c9
00d700000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000fe79056d000c03b700060013
0000fffaffedfea6ffedfeb8050e000600130000fffaffedfe93050e0013
0420000600130000fffaffedff10ffee050e00130420000600130000fffa
ffeefe93ff10feb80612000a050e0006000d02d2fffafff301fdfffa023f
0006000dff36fffafff302870006000f0000fffafff1079efeaffea70000
0000000000000000000000500051005a005b005c005d0060006100620064
00680069006a006b006c006d006e00680069006e00600067006e00660068
005f00610063006400660068006a006b006c006d006e006f0070006f0072
0074007500760076007000720073007400750076006f0070007100720073
00750077007700780079007a007b007c007d007b007c007d00770079007a
007c0078007a007c007d0078007d007e007f008000810082007e007f0081
0082007e007f008000810082008300840085008600870088008900830084
008500860087008800890083008400850086008700880089008900860087
00880089008a008b008c008d008e008f008a008b008c008d008e008f008a
008b008c008d008e008f008d008a008b008c008d008e008f009000900091
0092009300940095009600980099009b009c009000910092009300940095
0096009700980099009a009e009f00a60090009100950098009f00900091
0096009700bc00c600b500ae00af00b6006800690063006a006f00700071
006f0070007100720066006c006d00700079007c007f0083008600870088
0089008a0074007500760077007a007b007c007d007e008200850086008a
0088008900830078007b00820083008600870088008900760079007a007c
007d007e0083008500880089008a0073007400750077007a007d00880089
008a008b008c008d008e00900094008b008c008d00910092009300940095
008c008d00910095008f009000910092009300940095008b008c008d008e
008f009000910092009300940095008b008c008d008e008f009000910092
00930096009700980099009c0096009700980099009a009b009c00960099
009a009c0096009700980099009a009b009c009700980099009a009b009c
009700980099009a009b009c0096009d00a000a1009d009e009f00a000a1
00a2009d009f00a000a1009f00a2009d009e009f00a000a100a2009d009e
00a000a1009d009e00a000a2009d00a300a400a500a600a700a300a400a6
00a700a300a400a500a600a700a600a300a700a800a900aa00ab00ac00ac
00a800a900aa00ab00ac00a800a900aa00ab00ac00a800aa00ab00ac00ae
00ad00ae00af00b000b100b200b300b400b500b600b700b800ad00ae00ad
00ae00af00b000b100b200b300b400b500b600b700b800ad00ae00af00b0
00b100b200b300b400b500b600b700b800b300ae00af00b000b200b500b6
00b700b800b900ba00bb00bc00be00c000c100c200c200b900ba00bb00bc
00bd00be00bf00c000c100c200c400ba00bb00be00bf00c000c200c300c4
00b900ba00bf00c000c200c600c700c900ca00cb00cc00cf00c500c700ce
00c500c700c800cf00d000d200d300d7010d00d000d100e900d000fd00d0
05e4000e0041000005ba009c009c005e005e4047645f5e5d5c5b5a595855
54535251504f4e4d4c4b4a494847464544434241403f3e3d3c3b3a393837
36352f2e2d2c2826252423221f181411100f0d0b0a090807060504030201
002c4523466020b02660b004262348482d2c452346236120b02661b00426
2348482d2c45234660b0206120b04660b004262348482d2c4523462361b0
206020b02661b02061b004262348482d2c45234660b0406120b06660b004
262348482d2c4523462361b0406020b02661b04061b004262348482d2c01
10203c003c2d2c20452320b0cd442320b8015a51582320b08d44235920b0
ed51582320b04d44235920b0042651582320b00d44235921212d2c202045
18684420b001602045b04676688a4560442d2c01b10b0a432343650a2d2c
00b10a0b4323430b2d2c00b0282370b101283e01b0282370b10228453ab1
0200080d2d2c2045b00325456164b050515845441b2121592d2c2045b000
4360442d2c01b00643b00743650a2d2c2069b04061b0008b20b12cc08a8c
b8100062602b0c642364615c58b00361592d2c8a03458a8a87b0112bb029
2344b0297ae4182d2c4565b02c234445b02b23442d2c4b525845441b2121
592d2c01b005251023208af500b0016023edec2d2c01b005251023208af5
00b0016123edec2d2c01b0062510f500edec2d2c20b001600110203c003c
2d2c20b001610110203c003c2d2c00b00743b006430b2d2c21210c642364
8bb84000622d2c21b08051580c6423648bb82000621bb200402f2b59b002
602d2c21b0c051580c6423648bb81555621bb200802f2b59b002602d2c0c
6423648bb84000626023212d2c4523456023456023456023766818b08062
202d2cb00426b00426b00425b0042545234520b003266062636820b00326
61658a2344442d2c2045b0005458b040442045b04061441b2121592d2c45
b1302f4523456160b0016069442d2c4b5158b02f2370b01423421b212159
2d2c4b515820b0032545695358441b2121591b2121592d2c45b01443b000
6063b0016069442d2cb02f45442d2c452320458a60442d2c45234560442d
2c4b235158b90033ffe0b134201bb3330034005944442d2cb0164358b003
26458a586466b01f601b64b020606620581b21b04059b001615923586559
b02923442310b029e01b2121212121592d2cb0164358b004254564b02060
6620581b21b04059b0016123586559b0292344b00425b00725082058021b
0359b0052510b004252046b0042523423cb0072510b006252046b00425b0
016023423c2058011b0059b0052510b00425b029e0b0072510b00625b029
e0b00425b00725082058021b0359b00425b003254348b00625b00325b001
6043481b2159212121212121212d2cb0164358b004254564b02060662058
1b21b04059b0016123581b6559b0292344b00525b00825082058021b0359
b0042510b005252046b0042523423cb00425b0072508b0072510b0062520
46b00425b0016023423c2058011b0059b0042510b00525b029e0b0292045
6544b0072510b00625b029e0b00525b00825082058021b0359b00525b003
254348b00425b0072508b00625b00325b0016043481b2159212121212121
212d2c02b00425202046b004252342b0052508b003254548212121212d2c
02b0032520b0042508b0022543482121212d2c452320451820b000502058
23652359236820b040505821b04059235865598a60442d2c4b53234b515a
5820458a60441b2121592d2c4b545820458a60441b2121592d2c4b53234b
515a58381b2121592d2cb000214b5458381b2121592d2cb002435458b046
2b1b21212121592d2cb002435458b0472b1b212121592d2cb002435458b0
482b1b21212121592d2cb002435458b0492b1b212121592d2c208a08234b
538a4b515a5823381b2121592d2c0020b200400325b0062649618b381234
2d2c014623466023466123201020468a61b8ff80628ab140408a70456068
3a2d2c208a2349648a2353583c1b21592d2c4b52587d1b7a592d2cb01200
4b014b54422d2cb1020042b123018851b1400188535a58b9100000208854
58b202010243604259b12401885158b920000040885458b2020202436042
b12401885458b2022002436042004b014b5258b2020802436042591bb940
000080885458b202040243604259b94000008063b80100885458b2020802
43604259b94000010063b80200885458b202100243604259b94000020063
b80400885458b202400243604259595959592d2c451868234b5158232045
2064b04050587c59688a6059442d2cb00016b00225b0022501b001233e00
b002233eb10102060cb00a236542b00b234201b001233f00b002233fb101
02060cb006236542b0072342b00116012d2c20b82000628a6023622d2cb0
072558001b0159b0042510b00325b0022520b8ffff545821cd1bed5921b0
06255cb006255a58b0092b5920b005254ab0042547b004254760b0062547
b0806361b00225b0005558b00325b00725496359b0082558001b0159b004
25b0062549b009255cb009255a58b0092b59b0072546b0806361b0032520
b0005558631b2159612320b0005558b080631b21b08059b0592bb006255c
586959b00425202010b00048233ab0062658001b0159b0052658b003252f
598a12233221212d2cb00625b00a2587b00625b009254ab0005358b00625
b00a251bb00925b0072559b00225b00225070cb005256323b00625636020
b94000040063535821b00426b00426b00a1bb94000040063655158b00426
65b0042665b00a1bb00426b00426b000b00325b003250b0d0ab0092eb007
25b007250b0d0ab00b2eb00525b0052507595920b0005558b00525b00525
87b00725b007250bb0092510b00b25b0092620b8ffff545821cd1bed59b0
0525b0052507b00825b00b254923b00625b0062587b00a2510b00b25c159
20b00051b800522378b00161b00225b00725b0072507b00a25b00d254961
b08062b00525b005250bb00a252338b00625b0062587b00825b008250bb0
0a2510b00b25c4b00625b0062507b00925b00c2549b0032554b8ffa72379
2121212121212121212121212d2c23b0005458b9400000001bb900004000
598ab0005458b9400000001bb90000400059b05b2b2d2c08b0005458b940
0000001bb900004000590db05b2b2d2c8a8a080d8ab0005458b940000000
1bb90000400059b05b2b2d2cb00426b00426080db00426b00426080db05b
2b2d2c204569442d0000000100000005dc2970272e1d5f0f3cf500190800
00000000bbeb7ccc00000000ce0d5eedfbfafd8b09ec0836000000090002
000000000000000100000600fe0001c40aa0fbfafaa009ec000100000000
0000000000000000000008c2040e0000000000000000000001cf00000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000006d700ac000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000046500a100000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000060600a10000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000003ed00a100000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
043400600000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000002ca00990000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000002e50048000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000001f6
006c00000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000029b010a000000000000
000000000000000000000000000000000000026000ed0000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000335
008b00000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000046d008e00000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000046d008e000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000a100a100a100a100a100a100a100a1
00a100a100a100a100a100a100a100a100a100a100a100a100a100a100a1
00a100a100a100a100a100a100a100a100a100a100a100a100a100a100a1
00a100a100a100a100a100a100a100a100a100a100a100a100a100a100a1
00a100a100a100a100a100a100a100a100a100a100a100a100a100a100a1
014e014e014e014e014e014e014e014e014e014e014e014e014e014e014e
014e014e014e014e014e014e014e014e014e014e014e014e014e014e014e
014e014e014e014e014e014e014e014e014e014e014e014e014e014e014e
014e014e014e014e014e014e014e014e014e014e014e014e014e014e014e
014e014e014e014e014e014e014e014e014e014e014e014e014e014e014e
014e014e014e014e014e014e014e014e0190019001900190019001900190
019001900190019001900190019001900190019001900190019001900190
019001900190019001900190019001900190019001900190019001900190
019001900190019001900190019002060206020602060206020602060206
020602060206020602060206020602060206020602060206020602060280
028002800280028002800280028002800280028002800280028002800280
028002800280028002800280028002800280028002800280028002800280
028002800280028002800280028002800280028002800280028002800280
028002800280028002800280028002800280028002800280028002800280
028002800280028003170317031703170317031703170317031703170317
031703170317031703170317031703170317031703170317031703170317
031703170317031703170317031703170317031703170317031703170317
031703170317031703170317031703170317031703170317031703170317
031703170317031703170317031703170317031703170317031703170317
031703170317031703170317031703170317031703170317031703170317
031703170317031703170317031703170317031703170317031703170317
031703170317031703170317031703170317031703170317031703900390
039003900390039003900390039003900390039003900390039003900390
039003900390039003900390039003900390039003900390039003900390
039003900390039003900390039003900390039003900390039003900390
039003900390039003900390039003900390039003900390039003900390
03900390039003900390039003900390039003900390039003f603f603f6
03f603f603f603f603f603f603f603f603f603f603f60449044904490449
044904490449044904490449044904490449044904490449044904490449
044904490449044904490449044904490449044904490449044904490449
044904490449044904490449044904490449044904490449044904490449
044904490449044904490449044904490449044904490449044904490449
044904490449044904490449044904490449044904490449044904490449
044904490449044904490449044904490449044904490449044904490449
044904490449044904490449044904490449044904490449044904490449
044904490449044904490449044904490449044904490449044904490449
044904490449044904490449044904490449044904490449044904490449
044904490449044904490449044904490449044904490449044904490449
044904490449044904490449044904490449044904490449044904490449
044904490449044904490449044904490449044904490449044904490449
044904490449044904490449044904490449044904490449044904490449
044904490449044904490449044904490449044904490449044904490449
044904490449044904490449044904490449044904490449044904490449
044904490449044904490449044904490449044904490449044904490449
044904490449044904490449044904490449044904490449044904490449
044904490449044904490449044904490449044904490449044904490449
044904490449044904490449044904490449044904490449044904490449
044904490449044904490449044904490449044904490449044904490449
044904490449044904490449044904490449044904490449044904490449
044904490449044904490449044904490449044904490449044904490449
044904490449044904490449044904490449044904490449044904490449
044904490449044904490449044904490449048e048e048e048e048e048e
048e04dc04dc04dc04dc04dc04dc04dc04dc04dc04dc04dc04dc04dc04dc
04dc04dc04dc04dc04dc04dc04dc04dc04dc04dc04dc04dc04dc04dc04dc
04dc04dc04dc04dc04dc04dc04dc04dc04dc04dc04dc04dc04dc04dc04dc
04dc04dc04dc04dc04dc04dc04dc04dc04dc04dc04dc04dc04dc04dc04dc
04dc04dc04dc04dc04dc04dc04dc04dc04dc04dc04dc0522052205220522
052205220522052205220522052205220522052205220522052205220522
052205220522052205220522052205220522052205220522052205220522
052205220522052205220522052205220522052205220522052205220522
052205220522052205220522052205220522052205220522052205220522
052205220522052205220522052205220522052205220522052205220522
052205220522052205220522052205220522052205220522052205220522
052205220522052205220522052205220522052205220522052205220522
052205220522052205220522052205220522052205220522052205220522
052205220522052205220522052205220522052205220522052205220522
052205220522052205220522052205220522052205220522052205220522
052205220522052205220522052205220522052205220522052205220522
052205220522052205220522052205220522052205220522052205220522
052205220522052205220522052205220522052205220522052205220522
052205220522052205220522052205220522052205220522052205220522
052205220522052205220522052205220522052205220522052205220522
052205220522052205220522052205220522052205220522052205220522
052205220522052205220522052205220522052205220522052205220522
052205220522052205220522052205220522052205220522052205220522
052205220522052205220522052205220522052205220522052205220522
052205220522052205220522052205220522052205220522052205220522
052205220522052205220522052205220522052205220522052205220522
052205220522052205220522052205220522052205220522052205220522
052205220522052205220522052205220522052205220522052205220522
052205220522052205220522052205220522052205220522052205220522
052205220522052205220522052205220522052205220522052205220522
052205220522052205220522052205220522052205220522052205220522
05220522052205220522052a052a052a052a052a052a052a052a052a052a
052a052a052a052a052a052a052a052a052a052a052a052a052a052a052a
052a052a052a052a052a052a052a052a052a052a052a052a052a052a052a
052a052a052a052a052a052a052a052a052a052a052a052a052a052a052a
052a052a052a052a052a052a052a052a052a052a052a052a052a052a052a
052a052a052a052a052a052a052a052a052a052a052a052a052a052a052a
052a052a052a052a052a052a052a052a052a052a052a052a052a052a052a
052a052a052a052a052a052a052a052a052a052a052a052a052a052a052a
052a052a052a052a052a052a052a052a052a052a052a052a052a052a052a
052a052a052a052a052a052a052a052a052a052a052a052a052a052a052a
052a052a052a052a052a052a052a052a052a052a052a052a052a052a052a
052a052a052a052a052a052a052a052a052a052a052a052a052a052a052a
052a052a052a052a052a052a052a052a052a052a052a052a052a052a052a
052a052a052a052a052a052a052a052a052a052a052a052a052a052a052a
052a052a052a052a052a052a052a052a052a052a052a052a052a052a052a
052a052a052a052a052a052a052a052a052a052a052a052a052a052a052a
052a052a052a052a052a052a052a052a052a052a052a052a052a052a052a
052a052a052a052a052a052a052a052a052a052a052a052a052a052a052a
052a052a052a052a052a052a052a052a052a052a052a052a052a052a052a
052a052a052a052a052a052a052a052a052a052a052a052a052a052a052a
052a052a052a052a052a052a052a052a052a052a052a052a052a052a052a
052a052a052a052a052a052a052a052a052a052a052a052a052a052a052a
052a052a052a052a052a052a052a052a052a052a052a052a052a052a052a
052a052a052a052a052a052a052a052a052a052a052a052a052a052a052a
052a052a052a052a052a052a052a052a052a052a052a052a052a052a052a
052a052a052a052a052a052a052a052a052a052a052a052a052a052a052a
052a052a052a052a052a052a052a052a052a052a052a052a052a052a052a
052a052a052a052a052a052a052a052a052a052a052a052a052a052a052a
052a052a052a052a052a052a052a052a052a052a052a052a052a052a052a
052a052a052a052a052a052a052a052a052a052a052a052a052a052a052a
052a052a052a052a052a052a052a052a052a052a052a052a052a052a052a
052a052a052a052a052a052a052a052a052a052a052a052a052a052a052a
052a052a052a052a052a052a052a052a052a052a052a052a052a052a052a
052a052a052a052a052a052a052a052a052a052a052a052a052a052a052a
052a052a052a052a052a052a052a052a052a052a052a052a052a052a052a
052a052a052a052a052a052a052a052a052a052a052a052a052a052a052a
052a052a052a052a052a052a052a052a052a052a052a052a052a052a052a
052a052a052a052a052a052a052a052a052a052a052a052a052a052a052a
052a052a052a052a052a052a052a052a052a052a052a052a052a052a052a
052a052a052a052a052a052a052a052a052a052a052a052a052a052a052a
052a052a052a052a052a052a052a052a052a052a052a052a052a052a052a
052a052a052a052a052a052a052a052a052a052a052a052a052a052a052a
052a052a052a052a052a052a052a052a052a052a052a052a052a052a052a
052a052a052a052a052a052a052a052a052a052a052a052a052a052a052a
052a052a052a052a052a052a052a052a052a052a052a052a052a052a052a
052a052a052a052a052a052a052a052a052a052a052a052a052a052a052a
052a052a052a052a052a052a052a052a052a052a052a052a052a052a052a
052a052a052a052a052a052a052a052a052a052a052a052a052a052a052a
052a052a052a052a052a052a052a052a052a052a052a052a052a052a052a
052a052a052a052a052a052a052a052a052a052a052a052a052a052a052a
052a052a052a052a052a052a052a052a052a052a052a052a052a052a052a
052a052a052a052a052a052a052a052a052a052a052a052a052a052a052a
052a052a052a052a052a052a052a052a052a052a052a052a052a052a052a
052a052a052a052a052a052a052a052a052a052a052a052a052a052a052a
052a052a052a052a052a052a052a052a052a052a052a052a052a052a052a
052a052a052a052a052a052a052a052a052a052a052a052a052a052a052a
052a052a052a052a052a052a052a052a052a052a052a052a052a052a052a
052a052a052a052a052a052a052a052a052a052a052a052a052a052a052a
052a052a052a052a052a052a052a052a052a052a052a052a052a052a052a
052a052a052a052a052a052a052a052a052a052a052a052a052a052a052a
052a052a052a052a052a052a052a052a052a052a052a052a052a052a052a
052a052a052a052a052a052a052a052a052a052a052a052a059b059b059b
059b059b059b059b059b059b059b059b059b059b059b059b059b059b059b
059b059b059b059b059b059b059b059b059b059b059b059b059b059b059b
059b059b059b059b059b059b059b059b059b059b059b059b059b059b059b
059b059b059b059b059b059b059b059b059b059b059b059b059b059b059b
059b059b059b059b059b059b059b059b059b059b059b059b059b059b059b
059b059b059b059b059b059b059b059b059b059b059b059b059b059b059b
059b059b059b059b059b059b059b059b059b059b059b059b059b059b059b
059b059b059b059b059b059b059b059b059b059b059b059b059b059b059b
059b059b059b059b059b059b059b059b059b059b059b059b059b059b059b
059b059b059b059b059b059b059b059b059b059b059b059b059b059b059b
059b059b059b059b059b059b059b059b059b059b059b059b059b059b059b
059b059b059b059b059b059b059b059b059b059b059b059b059b059b059b
059b059b059b059b059b059b059b059b059b059b059b059b059b059b059b
059b059b059b059b059b059b059b059b059b059b059b059b059b059b059b
059b059b059b059b059b059b059b059b059b059b059b059b059b059b059b
059b059b059b059b059b059b059b059b059b059b059b059b059b059b059b
059b059b059b059b059b059b059b059b059b059b059b059b059b059b059b
059b059b059b059b059b059b059b059b059b059b059b059b059b059b059b
059b059b059b059b059b059b059b059b059b059b059b059b059b059b059b
059b059b059b059b059b059b059b059b059b059b059b059b059b059b059b
059b059b059b059b059b059b059b059b059b059b059b059b059b059b059b
059b059b059b059b059b059b059b059b059b059b059b059b059b059b059b
059b059b059b059b059b059b059b059b059b059b059b059b059b059b059b
059b059b059b059b059b059b059b059b059b059b059b059b059b059b059b
059b059b059b059b059b059b059b059b059b059b059b059b059b059b059b
059b059b059b059b059b059b059b059b059b059b059b059b059b059b059b
059b059b059b059b059b059b059b059b059b059b059b059b059b059b059b
059b059b059b059b059b059b059b059b059b059b059b059b059b059b059b
059b059b059b059b059b059b059b059b059b059b059b059b059b059b059b
059b059b059b059b059b059b059b059b059b059b059b059b059b059b059b
059b059b059b059b059b059b059b059b059b059b059b059b059b059b059b
059b059b059b059b059b059b059b059b059b059b059b059b059b059b059b
059b059b059b059b059b059b059b059b059b059b059b059b059b059b059b
059b059b059b059b059b059b059b059b059b059b059b059b059b059b059b
059b059b059b059b059b059b059b059b059b059b059b059b059b059b059b
059b059b059b059b059b059b059b059b059b059b059b059b059b059b059b
059b059b059b059b059b059b059b059b059b059b059b059b059b059b059b
059b059b059b059b059b059b059b059b059b059b059b059b059b059b059b
059b059b059b059b059b059b059b059b059b059b059b059b059b059b059b
059b059b059b059b059b059b059b059b059b059b059b059b059b059b059b
059b059b059b059b059b059b059b059b059b059b059b059b059b059b059b
059b059b059b059b059b059b059b059b059b059b059b059b059b059b059b
059b059b059b059b059b059b059b059b059b059b059b059b059b059b059b
059b059b059b059b059b059b059b059b059b059b059b059b059b059b059b
059b059b059b059b059b059b059b059b059b059b059b059b059b059b059b
059b059b059b059b059b059b059b059b059b059b059b059b059b059b059b
059b059b059b059b059b059b059b059b059b059b059b059b059b059b059b
059b059b059b059b059b059b059b059b059b059b059b059b059b059b059b
059b059b059b059b059b059b059b059b059b059b059b059b059b059b059b
059b059b059b059b059b059b059b059b059b059b059b059b059b059b059b
059b059b059b059b059b059b059b059b059b059b059b059b059b059b059b
059b059b059b059b059b059b059b059b059b059b059b059b059b059b059b
059b059b059b059b059b059b059b059b059b059b059b059b059b059b059b
059b059b059b059b059b059b059b059b059b059b059b059b059b059b059b
059b059b059b059b059b059b059b059b059b059b059b059b059b059b059b
059b059b059b059b059b059b059b059b059b059b059b059b059b059b059b
059b059b059b059b059b059b059b059b059b059b059b059b059b059b059b
059b059b059b059b059b059b059b059b059b059b059b059b059b059b059b
059b059b059b059b059b059b059b059b059b059b059b059b059b059b059b
059b059b059b059b059b059b059b059b059b059b059b059b059b059b059b
059b059b059b059b059b059b059b059b059b059b059b059b059b059b059b
059b059b059b059b059b059b059b059b059b059b059b059b059b059b059b
059b059b059b059b059b059b059b059b059b059b059b059b059b059b059b
059b059b059b059b059b059b059b059b059b059b059b059b059b059b059b
059b059b059b059b059b059b059b059b059b059b059b059b059b059b059b
059b059b059b059b059b059b059b059b059b059b059b059b059b059b059b
059b059b059b059b059b059b059b059b059b059b059b059b059b059b059b
059b059b059b059b059b059b059b059b059b059b059b059b059b059b059b
059b059b059b059b059b059b059b059b059b059b059b059b059b059b059b
059b059b059b059b059b059b059b059b059b059b059b059b059b059b059b
059b059b059b059b059b059b059b059b059b059b059b059b059b059b059b
059b059b059b059b059b059b059b059b059b059b059b059b059b059b059b
059b059b059b059b059b059b059b059b059b059b059b059b059b059b059b
059b059b059b059b059b059b059b059b059b059b059b059b059b059b059b
059b059b059b059b059b059b059b059b059b059b059b059b059b059b059b
059b059b059b059b059b059b059b059b059b059b059b059b059b059b059b
059b059b059b059b059b059b059b059b059b059b059b059b059b059b059b
059b059b059b059b059b059b059b059b059b059b059b059b059b059b059b
059b059b059b059b059b059b059b059b059b059b059b059b059b059b059b
059b059b059b059b059b059b059b059b059b059b059b059b059b059b059b
059b059b059b059b059b059b059b059b059b059b059b059b059b059b059b
059b059b059b059b059b059b059b059b059b059b059b059b059b059b059b
059b059b059b059b059b059b059b059b059b059b059b059b059b059b059b
059b059b059b059b059b059b059b059b059b059b059b059b059b059b059b
059b059b059b059b059b059b059b059b059b059b059b059b059b059b059b
059b059b059b059b059b059b059b059b059b059b059b059b059b059b059b
059b059b059b059b059b059b059b059b059b059b059b059b059b059b059b
059b059b059b059b059b059b059b059b059b059b059b059b059b059b059b
059b059b059b059b059b059b059b059b059b059b059b059b059b059b059b
059b059b059b059b059b059b059b059b059b059b059b059b059b059b059b
059b059b059b059b059b059b059b059b059b059b059b059b059b059b059b
059b059b059b059b059b059b059b059b059b059b059b059b059b059b059b
059b059b059b059b059b059b059b059b059b059b059b059b059b059b059b
059b059b059b059b059b059b059b059b059b059b059b059b059b059b059b
059b059b059b059b059b059b059b059b059b059b059b059b059b059b059b
059b059b059b059b059b059b059b059b059b059b059b059b059b059b059b
059b059b059b059b059b059b059b059b059b059b059b059b059b059b059b
059b059b059b059b059b059b059b059b059b059b059b059b059b059b059b
059b059b059b059b059b059b059b059b059b059b059b059b059b059b059b
059b059b059b059b059b059b059b059b059b059b059b059b059b059b059b
059b059b059b059b059b059b059b059b059b059b059b059b059b059b059b
059b059b059b059b059b059b059b059b059b059b059b059b059b059b059b
059b059b059b059b059b059b059b059b059b059b059b059b059b059b059b
059b059b059b059b059b059b059b059b059b059b059b059b059b059b059b
059b059b059b059b059b059b059b059b059b059b059b059b059b059b059b
059b059b059b059b059b059b059b059b059b059b059b059b059b059b059b
059b059b059b059b059b059b059b059b059b059b059b059b059b059b059b
059b059b059b059b059b059b059b059b059b059b059b059b059b059b059b
059b059b059b059b059b059b059b059b059b059b059b059b059b059b059b
0000000100000f26004f0005003c000100020010002f0065000011902410
000100010000002d02220000000300000000006400000000000300000001
000e00640000000300000002000e03040000000300000003002403120000
000300000004000e00640000000300000005001803360000000300000006
000e006400000003000000070076034e0000000300000008002a000e0000
000300000009002003c4000000030000000a02a00064000000030000000b
005603e4000000030000000c002a043a000000030000000d029804640000
00030000000e006c06fc0001000000000000003207680001000000000001
0007079a0001000000000002000708ea0001000000000003001208f10001
0000000000040007079a0001000000000005000c09030001000000000006
0007079a0001000000000007003b090f00010000000000080015076f0001
0000000000090010094a000100000000000a0150079a000100000000000b
002b095a000100000000000c00150985000100000000000d014c099a0001
00000000000e00360ae60003000104090000006400000003000104090001
000e00640003000104090002000e03040003000104090003002403120003
000104090004000e00640003000104090005001803360003000104090006
000e006400030001040900070076034e0003000104090008002a000e0003
000104090009002003c4000300010409000a02a00064000300010409000b
005603e4000300010409000c002a043a000300010409000d029804640003
00010409000e006c06fc00a9002000320030003100330020004d00690063
0072006f0073006f0066007400200043006f00720070006f007200610074
0069006f006e002e00200041006c006c0020005200690067006800740073
002000520065007300650072007600650064002e00430061006c00690062
00720069002000690073002000610020006d006f006400650072006e0020
00730061006e0073002000730065007200690066002000660061006d0069
006c00790020007700690074006800200073007500620074006c00650020
0072006f0075006e00640069006e006700730020006f006e002000730074
0065006d007300200061006e006400200063006f0072006e006500720073
002e00200049007400200066006500610074007500720065007300200072
00650061006c0020006900740061006c006900630073002c00200073006d
0061006c006c00200063006100700073002c00200061006e00640020006d
0075006c007400690070006c00650020006e0075006d006500720061006c
00200073006500740073002e0020004900740073002000700072006f0070
006f007200740069006f006e007300200061006c006c006f007700200068
00690067006800200069006d007000610063007400200069006e00200074
0069006700680074006c007900200073006500740020006c0069006e0065
00730020006f0066002000620069006700200061006e006400200073006d
0061006c006c0020007400650078007400200061006c0069006b0065002e
002000430061006c0069006200720069002700730020006d0061006e0079
002000630075007200760065007300200061006e00640020007400680065
0020006e0065007700200072006100730074006500720069007300650072
0020007400650061006d00200075007000200069006e0020006200690067
006700650072002000730069007a0065007300200074006f002000720065
007600650061006c002000610020007700610072006d00200061006e0064
00200073006f006600740020006300680061007200610063007400650072
002e0052006500670075006c00610072004d006900630072006f0073006f
00660074003a002000430061006c00690062007200690056006500720073
0069006f006e00200035002e0038003600430061006c0069006200720069
00200069007300200061002000740072006100640065006d00610072006b
0020006f006600200074006800650020004d006900630072006f0073006f
00660074002000670072006f007500700020006f006600200063006f006d
00700061006e006900650073002e004c0075006300280061007300290020
00640065002000470072006f006f00740068007400740070003a002f002f
007700770077002e006d006900630072006f0073006f00660074002e0063
006f006d002f007400790070006f006700720061007000680079002f0063
00740066006f006e007400730068007400740070003a002f002f0066006f
006e007400660061006200720069006b002e0063006f006d0059006f0075
0020006d0061007900200075007300650020007400680069007300200066
006f006e00740020006100730020007000650072006d0069007400740065
00640020006200790020007400680065002000450055004c004100200066
006f00720020007400680065002000700072006f00640075006300740020
0069006e0020007700680069006300680020007400680069007300200066
006f006e007400200069007300200069006e0063006c0075006400650064
00200074006f00200064006900730070006c0061007900200061006e0064
0020007000720069006e007400200063006f006e00740065006e0074002e
00200059006f00750020006d006100790020006f006e006c007900200028
0069002900200065006d0062006500640020007400680069007300200066
006f006e007400200069006e00200063006f006e00740065006e00740020
006100730020007000650072006d00690074007400650064002000620079
002000740068006500200065006d00620065006400640069006e00670020
007200650073007400720069006300740069006f006e007300200069006e
0063006c007500640065006400200069006e002000740068006900730020
0066006f006e0074003b00200061006e0064002000280069006900290020
00740065006d0070006f0072006100720069006c007900200064006f0077
006e006c006f006100640020007400680069007300200066006f006e0074
00200074006f002000610020007000720069006e0074006500720020006f
00720020006f00740068006500720020006f007500740070007500740020
00640065007600690063006500200074006f002000680065006c00700020
007000720069006e007400200063006f006e00740065006e0074002e0068
007400740070003a002f002f007700770077002e006d006900630072006f
0073006f00660074002e0063006f006d002f007400790070006f00670072
0061007000680079002f0066006f006e00740073002f0064006500660061
0075006c0074002e0061007300700078a92032303133204d6963726f736f
667420436f72706f726174696f6e2e20416c6c2052696768747320526573
65727665642e43616c696272692069732061206d6f6465726e2073616e73
2073657269662066616d696c79207769746820737562746c6520726f756e
64696e6773206f6e207374656d7320616e6420636f726e6572732e204974
206665617475726573207265616c206974616c6963732c20736d616c6c20
636170732c20616e64206d756c7469706c65206e756d6572616c20736574
732e204974732070726f706f7274696f6e7320616c6c6f77206869676820
696d7061637420696e2074696768746c7920736574206c696e6573206f66
2062696720616e6420736d616c6c207465787420616c696b652e2043616c
696272692773206d616e792063757276657320616e6420746865206e6577
2072617374657269736572207465616d20757020696e2062696767657220
73697a657320746f2072657665616c2061207761726d20616e6420736f66
74206368617261637465722e526567756c61724d6963726f736f66743a20
43616c6962726956657273696f6e20352e383643616c6962726920697320
612074726164656d61726b206f6620746865204d6963726f736f66742067
726f7570206f6620636f6d70616e6965732e4c7563286173292064652047
726f6f74687474703a2f2f7777772e6d6963726f736f66742e636f6d2f74
79706f6772617068792f6374666f6e7473687474703a2f2f666f6e746661
6272696b2e636f6d596f75206d617920757365207468697320666f6e7420
6173207065726d6974746564206279207468652045554c4120666f722074
68652070726f6475637420696e207768696368207468697320666f6e7420
697320696e636c7564656420746f20646973706c617920616e6420707269
6e7420636f6e74656e742e20596f75206d6179206f6e6c79202869292065
6d626564207468697320666f6e7420696e20636f6e74656e742061732070
65726d69747465642062792074686520656d62656464696e672072657374
72696374696f6e7320696e636c7564656420696e207468697320666f6e74
3b20616e6420286969292074656d706f726172696c7920646f776e6c6f61
64207468697320666f6e7420746f2061207072696e746572206f72206f74
686572206f75747075742064657669636520746f2068656c70207072696e
7420636f6e74656e742e687474703a2f2f7777772e6d6963726f736f6674
2e636f6d2f7479706f6772617068792f666f6e74732f64656661756c742e
61737078000000>
<b2090320b80284b40918014a20b80283b40918014a20b80282b40918014a
20b80281b40918014a20b80280b40918014a20b8027fb40918014a20b802
7eb40918014a20b8027db40918014a20b8027cb40918014a20b8027bb409
18014a20b8027ab40918014a20b80279b40918014a20b80278b40918014a
20b80277b40918014a20b80276b40918014a20b80275b40918014a20b802
74b40918014a20b80273b40918014a20b80271b40918014a20b80270b409
18014a20b8026fb40918014a20b8026eb40918014a20b8026db40918014a
20b8026cb40918014a20b8026bb40918014a20b8026ab40918014a20b802
69b40918014a20b80268b40918014a20b80267b40918014a20b80266b409
18014a20b80265b40918014a20b80264b40918014a20b80263b40918014a
20b80262b40918014a20b80261b40918014a20b80260b40918014a20b802
5fb40918014a20b8025eb40918014a20b8025db40918014a20b8025cb409
18014a20b8025bb40918014a20b8025ab40918014a20b80259b40918014a
20b80258b40918014a20b80257b40918014a20b80256b40918014a20b802
55b40918014a20b80254b40918014a20b80253b40918014a20b80252b409
18014a20b80251b40918014a20b80250b40918014a20b8024fb40918014a
20b8024eb40918014a20b8024db40918014a20b8024cb40918014a20b802
4bb40918014a20b8024ab40918014a20b80249b40918014a20b80248b409
18014a20b80247b40918014a20b80246b40918014a20b80245b40918014a
20b80244b40918014a20b80243b40918014a20b80242b40918014a20b802
41b40918014a20b80240b40918014a20b8023fb40918014a20b8023eb409
18014a20b8023db40918014a20b8023cb40918014a20b8023bb40918014a
20b8023ab40918014a20b80239b40918014a20b80238b40918014a20b802
37b40918014a20b80236b40918014a20b80235b40918014a20b80234b409
18014a20b80233b40918014a20b80232b40918014a20b80231b40918014a
20b80230b40918014a20b8022fb40918014a20b8022eb40918014a20b802
2db40918014a20b8022cb40918014a20b8022bb40918014a20b8022ab409
18014a20b80229b40918014a20b80228b40918014a20b80227b40918014a
20b80226b40918014a20b80225b40918014a20b80224b40918014a20b802
23b40918014a20b80222b40918014a20b80221b40918014a20b80220b409
18014a20b8021fb40918014a20b8021eb40918014a20b8021db40918014a
20b8021cb40918014a20b8021bb40918014a20b8021ab40918014a20b802
19b40918014a20b80218b40918014a20b80217b40918014a20b80216b409
18014a20b80215b40918014a20b80214b40918014a20b80213b40918014a
20b80212b40918014a20b80211b40918014a20b80210b40918014a20b802
0fb40918014a20b8020eb40918014a20b8020db40918014a20b8020cb409
18014a20b8020bb40918014a20b8020ab40918014a20b80209b40918014a
20b80208b40918014a20b80207b40918014a20b80206b40918014a20b802
05b40918014a20b80204b40918014a20b80203b40918014a20b80202b409
18014a20b80201b40918014a20b80200b40918014a20b801ffb40918014a
20b801feb40918014a20b801fdb40918014a20b801fcb40918014a20b801
fbb40918014a20b801fab40918014a20b801f9b40918014a20b801f8b409
18014a20b801f7b40918014a20b801f6b40918014a20b801f5b40918014a
20b801f4b40918014a20b801f3b40918014a20b801f2b40918014a20b801
f1b40918014a20b801f0b40918014a20b801efb40918014a20b801eeb409
18014a20b801edb40918014a20b801ecb40918014a20b801ebb40918014a
20b801eab40918014a20b801e9b40918014a20b801e8b40918014a20b801
e7b40918014a20b801e6b40918014a20b801e5b40918014a20b801e4b409
18014a20b801e3b40918014a20b801e2b40918014a20b801e1b40918014a
20b801e0b40918014a20b801dfb40918014a20b801deb40918014a20b801
ddb40918014a20b801dcb40918014a20b801dbb40918014a20b801dab409
18014a20b801d9b40918014a20b801d8b40918014a20b801d7b40918014a
20b801d6b40918014a20b801d5b40918014a20b801d4b40918014a20b801
d3b40918014a20b801d2b40918014a20b801d1b40918014a20b801d0b409
18014a20b801cfb40918014a20b801ceb40918014a20b801cdb40918014a
20b801ccb40918014a20b801cbb40918014a20b801cab40918014a20b801
c9b40918014a20b801c8b40918014a20b801c7b40918014a20b801c6b409
18014a20b801c5b40918014a20b801c4b40918014a20b801c3b40918014a
20b801c2b40918014a20b801c1b40918014a20b801c0b40918014a20b801
bfb40918014a20b801beb40918014a20b801bdb40918014a20b801bcb409
18014a20b801bbb40918014a20b801bab40918014a20b801b9b40918014a
20b801b8b40918014a20b801b7b40918014a20b801b6b40918014a20b801
b5b40918014a20b801b4b40918014a20b801b3b40918014a20b801b2b409
18014a20b801b1b40918014a20b801b0b40918014a20b801afb40918014a
20b801aeb40918014a20b801adb40918014a20b801acb40918014a20b801
abb40918014a20b801aab40918014a20b801a9b40918014a20b801a8b409
18014a20b801a7b40918014a20b801a6b40918014a20b801a5b40918014a
20b801a4b40918014a20b801a3b40918014a20b801a2b40918014a20b801
a1b40918014a20b801a0b40918014a20b8019fb40918014a20b8019eb409
18014a20b8019db40918014a20b8019cb40918014a20b8019bb40918014a
20b8019ab40918014a20b80199b40918014a20b80198b40918014a20b801
97b40918014a20b80196b40918014a20b80195b40918014a20b80194b409
18014a20b80193b40918014a20b80192b40918014a20b80191b40918014a
20b80190b40918014a20b8018fb40918014a20b8018eb40918014a20b801
8db40918014a20b8018cb40918014a20b8018bb40918014a20b8018ab409
18014a20b80189b40918014a20b80188b40918014a20b80187b40918014a
20b80186b40918014a20b80185b40918014a20b80184b40918014a20b801
83b40918014a20b80182b40918014a20b80181b40918014a20b80180b409
18014a20b8017fb40918014a20b8017eb40918014a20b8017db40918014a
20b8017cb40918014a20b8017bb40918014a20b8017ab40918014a20b801
79b40918014a20b80178b40918014a20b80177b40918014a20b80176b409
18014a20b80175b40918014a20b80174b40918014a20b80173b40918014a
20b80172b40918014a20b80171b40918014a20b80170b40918014a20b801
6fb40918014a20b8016eb40918014a20b8016db40918014a20b8016cb409
18014a20b8016bb40918014a20b8016ab40918014a20b80169b40918014a
20b80168b40918014a20b80167b40918014a20b80166b40918014a20b801
65b40918014a20b80164b40918014a20b80163b40918014a20b80162b409
18014a20b80161b40918014a20b80160b40918014a20b8015fb40918014a
20b8015eb40918014a20b8015db40918014a20b8015cb40918014a20b801
5bb40918014a20b8015ab40918014a20b80159b40918014a20b80158b409
18014a20b80157b40918014a20b80156b40918014a20b80155b40918014a
20b80154b40918014a20b80153b40918014a20b80152b40918014a20b801
50b40918014a20b8014fb40918014a20b8014eb40918014a20b8014cb409
18014a20b8014bb40918014a20b8014ab40918014a20b80149b40918014a
20b80148b40918014a20b80147b40918014a20b80146b40918014a20b801
45b40918014a20b80144b40918014a20b80143b30918014ab80284b21e3e
1fb80283b21e151fb80282b21e3e1fb80281b21e3a1fb80280b21e3e1fb8
027fb21e3e1fb8027eb21e0c1fb8027db21e3e1fb8027cb21e3e1fb8027b
b21e3e1fb8027ab21e3e1fb80279b21d411fb80278b21d431fb80277b21d
431fb80276b21d431fb80275b21d411fb80274b21d431fb80273b21d431f
b80272b21d411fb80271b21d421fb80270b21d421fb8026fb21d421fb802
6eb21d431fb8026db21d431fb8026cb21d431fb8026bb21c451fb8026ab2
1c451fb80269b21c451fb80268b21c451fb80267b21c451fb80266b21c44
1fb80265b21c451fb80264b21c451fb80263b21c451fb80262b21c451fb8
0261b21c451fb80260b21c451fb8025fb21c451fb8025eb21c441fb8025d
b21c451fb8025cb21c451fb8025bb21c451fb8025ab21c451fb80259b21c
451fb80258b21c451fb80257b21c451fb80256b21c451fb80255b21c451f
b80254b21c451fb80253b21c451fb80252b21c451fb80251b21c451fb802
50b21c451fb8024fb21c451fb8024eb21c451fb8024db21c451fb8024cb2
1c451fb8024bb21c451fb8024ab21b491fb80249b21b491fb80248b21b4a
1fb80247b21b4a1fb80246b21b4b1fb80245b21b4c1fb80244b21b4c1fb8
0243b21b4c1fb80242b21b4b1fb80241b21b491fb80240b21b491fb8023f
b21b4a1fb8023eb21b4a1fb8023db21b4a1fb8023cb21b4b1fb8023bb21b
4b1fb8023ab21b4c1fb80239b21b4c1fb80238b21b4c1fb80237b21b4c1f
b80236b21b4c1fb80235b21b491fb80234b21b491fb80233b21b4a1fb802
32b21b4a1fb80231b21b4a1fb80230b21b4b1fb8022fb21b4b1fb8022eb2
1b4c1fb8022db21b4c1fb8022cb21b4c1fb8022bb21b4c1fb8022ab21b4c
1fb80229b21b4c1fb80228b21b4c1fb80227b21b491fb80226b21b491fb8
0225b21b4a1fb80224b21b4a1fb80223b21b4a1fb80222b21b4b1fb80221
b21b4b1fb80220b21b4c1fb8021fb21b4c1fb8021eb21b4c1fb8021db21b
4c1fb8021cb21b4c1fb8021bb21b4c1fb8021ab21a4e1fb80219b21a4e1f
b80218b21a4f1fb80217b21a4f1fb80216b21a4e1fb80215b21a4e1fb802
14b21a4f1fb80213b21a4f1fb80212b21a4f1fb80211b21a4e1fb80210b2
1a4e1fb8020fb21a4f1fb8020eb21a4f1fb8020db21a4f1fb8020cb21a4e
1fb8020bb21a4e1fb8020ab21a4e1fb80209b21a4f1fb80208b21a4f1fb8
0207b21a4f1fb80206b219501fb80205b219511fb80204b219511fb80203
b219501fb80202b219511fb80201b219511fb80200b219511fb801ffb219
511fb801feb219501fb801fdb219511fb801fcb219511fb801fbb219511f
b801fab219501fb801f9b219511fb801f8b219511fb801f7b219511fb801
f6b219511fb801f5b218541fb801f4b218531fb801f3b218541fb801f2b2
18541fb801f1b218541fb801f0b218531fb801efb218541fb801eeb21854
1fb801edb218541fb801ecb218531fb801ebb218531fb801eab218541fb8
01e9b218541fb801e8b218541fb801e7b218541fb801e6b218531fb801e5
b218541fb801e4b218531fb801e3b218541fb801e2b218541fb801e1b218
541fb801e0b218531fb801dfb218531fb801deb218541fb801ddb218541f
b801dcb218541fb801dbb218541fb801dab218531fb801d9b218541fb801
d8b218541fb801d7b217571fb801d6b217561fb801d5b217561fb801d4b2
17571fb801d3b217571fb801d2b217571fb801d1b217571fb801d0b21756
1fb801cfb217561fb801ceb217571fb801cdb217571fb801ccb217571fb8
01cbb217571fb801cab217561fb801c9b217561fb801c8b217571fb801c7
b217571fb801c6b217571fb801c5b217571fb801c4b217571fb801c3b217
561fb801c2b217571fb801c1b217571fb801c0b217571fb801bfb217561f
b801beb217561fb801bdb217571fb801bcb217571fb801bbb217571fb801
bab217571fb801b9b217571fb801b8b217561fb801b7b217571fb801b6b2
17571fb801b5b217571fb801b4b217571fb801b3b2163f1fb801b2b2165b
1fb801b1b2165b1fb801b0b2165b1fb801afb2165b1fb801aeb2165b1fb8
01adb2165b1fb801acb2165b1fb801abb2165b1fb801aab2163e1fb801a9
b2163f1fb801a8b2163f1fb801a7b2165b1fb801a6b2165b1fb801a5b216
5b1fb801a4b2165b1fb801a3b2165b1fb801a2b2165b1fb801a1b2165b1f
b801a0b2165b1fb8019fb2163e1fb8019eb2163f1fb8019db2163f1fb801
9cb2165b1fb8019bb2165b1fb8019ab2165b1fb80199b2165b1fb80198b2
163e1fb80197b2165b1fb80196b2165b1fb80195b2165b1fb80194b2163e
1fb80193b2163f1fb80192b2163f1fb80191b2165b1fb80190b2165b1fb8
018fb2165b1fb8018eb2165b1fb8018db2165b1fb8018cb2163f1fb8018b
b2165b1fb8018ab2165b1fb80189b2165b1fb80188b2165b1fb80187b216
5b1fb80186b215611fb80185b215621fb80184b215621fb80183b215661f
b80182b215661fb80181b215551fb80180b215451fb8017fb215361fb801
7eb215361fb8017db215611fb8017cb215621fb8017bb215621fb8017ab2
15641fb80179b215661fb80178b215661fb80177b215661fb80176b21566
1fb80175b215661fb80174b215661fb80173b215451fb80172b215621fb8
0171b215621fb80170b215631fb8016fb215641fb8016eb215661fb8016d
b215661fb8016cb215661fb8016bb215661fb8016ab215661fb80169b215
621fb80168b215621fb80167b215611fb80166b215641fb80165b215641f
b80164b215661fb80163b215661fb80162b215661fb80161b215661fb801
60b215661fb8015fb215661fb8015eb215551fb8015db215451fb8015cb2
15451fb8015bb215361fb8015ab215611fb80159b215621fb80158b21562
1fb80157b215631fb80156b215641fb80155b215661fb80154b215661fb8
0153b215661fb80152b215661fb80151b214401fb80150b214551fb8014f
b214561fb8014eb214831fb8014db2142d1fb8014cb214401fb8014bb214
401fb8014ab214411fb80149b214401fb80148b214401fb80147b214411f
b80146b2147e1fb80145b214871fb80144b2147f1fb80143b214801fb801
42b212461fb80141b212461fb80140b212461fb8013fb212461fb8013eb2
12441fb8013db212461fb8013cb211591fb8013bb211591fb8013ab2115b
1fb80139b2115b1fb80138b211471fb80137b211581fb80136b2115a1fb8
0135b2115b1fb80134b2115b1fb80133b2112c1fb80132b211471fb80131
b211551fb80130b211571fb8012fb211571fb8012eb211581fb8012db211
591fb8012cb211591fb8012bb2115a1fb8012ab2115a1fb80129b2115b1f
b80128b2115b1fb80127b2115b1fb80126b2115b1fb80125b211561fb801
24b211561fb80123b211571fb80122b211581fb80121b211591fb80120b2
115a1fb8011fb2115a1fb8011eb2115b1fb8011db2115b1fb8011cb2115b
1fb8011bb2115b1fb8011ab2115b1fb80119b2105d1fb80118b2105e1fb8
0117b2105f1fb80116b2105f1fb80115b2105f1fb80114b2105f1fb80113
b2105f1fb80112b2105d1fb80111b2105e1fb80110b2105f1fb8010fb210
5f1fb8010eb2105f1fb8010db2105f1fb8010cb2105d1fb8010bb2105e1f
b8010ab2105f1fb80109b2105f1fb80108b2105f1fb80107b2105f1fb801
06b2105d1fb80105b2105e1fb80104b2105f1fb80103b2105f1fb80102b2
105f1fb80101b2105f1fb8010040ff0f621fff0f621ffe0f631ffd0f641f
fc0f621ffb0f621ffa0f621ff90f631ff80f641ff70f641ff60f641ff50f
641ff40f621ff30f621ff20f631ff10f641ff00f641fef0f641fee0f641f
ed0f621fec0f621feb0f631fea0f641fe90f641fe80f641fe70f641fe60e
671fe50e681fe40e681fe30e681fe20e681fe10e671fe00e681fdf0e681f
de0e681fdd0e671fdc0e681fdb0e681fda0e681fd90e681fd80d6b1fd70d
311fd60d6b1fd50d6c1fd40d261fd30d261fd20d6c1fd10d2b1fd00d2b1f
cf0d2b1fce0d6b1fcd0d6c1fcc0d6d1fcb0d6b1fca0d6c1fc90d6d1fc80d
6a1fc70d691fc60d681fc50d671fc40d261fc30d311fc20d311fc10d311f
40ffc00d311fbf0d311fbe0d311fbd0c711fbc0c721fbb0c731fba0c741f
b90c741fb80c741fb70c711fb60c711fb50c721fb40c731fb30c741fb20c
741fb10c741fb00c741faf0b791fae0b7a1fad0b7c1fac0b7d1fab0b7e1f
aa0b7e1fa90b7e1fa80b7e1fa70b7e1fa60b7e1fa50b2d1fa40b7e1fa30b
7e1fa20b791fa10b7e1fa00b6b1f9f0b791f9e0b7e1f9d0b7e1f9c0b791f
9b0b7a1f9a0b7c1f990b7d1f980b7e1f970b7e1f960b7e1f950b7e1f940b
7e1f930b7e1f920b6b1f910b2d1f900a4e1f8f0a4f1f8e0a671f8d0aa51f
8c0aa71f8503251f8403381f8301381f8255805581ab80557f557d557eab
7d550b7d010b7d1b7d4b7d7b7dab7ddb7d4012060a7c557a557bab7a5579
55775578ab7755ba028600660285403c5576ab755504751475747503f475
01ab750144750130750102007510752075030c7455725573ab7255007250
728072b072043bb072e072020072010ab8ffc0b3721b1e46b8ffc0407c72
0d104671556f5570ab6f556e666d556a03251f6938675568ab6755663864
5565ab645563386255613860555f385d555eab5d555c385a555bab5a5559
3858555703251f5638545555ab54555338515552ab51554f384e554e0325
1f4d384b554cab4b554a38485549ab4855473846554503381f001c101c20
1c0310b8ffc0404e1c1b1e46001b0142301b401be01bf01b04001bb01bc0
1b03120f1a1f1a02290f1901434f19016f197f198f19030f18cf18024018
292c460f17cf17df17ef1704134017292e460016101620160315b8ffc0b3
164d5446b8ffc0b3163f4446b8ffc0b316313546b8ffc0404d162326460f
15010f151f1502451f15010011e011f0110315bf10cf10020f0f010f0fff
0f02400f3135460f0e1f0e020f0e1f0eff0e03400e3137460f0d1f0d020f
0d1f0dff0d0316400d313746b8ffc040270c5054460f0b1f0b02553f0b4f
0b02400b3f4346400b2d30460003012001010001100120010308b8ffc0b3
01151f46b80100b316010501b80190b154532b2b4bb80800524bb008505b
b00188b02553b00188b040515ab00688b000555a5b58b101018e59b10102
4354b0144b515a58b101018e59858d8d00421d4bb01d5358b0a01d594bb0
805358b0401d594bb0ff5358b0001db1160042592b5e7375732b2b745e73
2b2b5e73742b73742b7374745e7301755e73742b2b2b2b5e732b5e732b73
74755e735e735e73755e732b5e73002b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b5e73755e732b2b5e735f7373737374
2b2b2b2b2b2b5e73742b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b012b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2bb1000243545841ff02840064028300640282
00640281006402800064027f0064027e0064027d0064027c0064027b0064
027a00640279006402780064027700640276006402750064027400640273
00640271006402700064026f0064026e0064026d0064026c0064026b0064
026a00640269006402680064026700640266006402650064026400640263
0064026200640261006402600064025f0064025e0064025d0064025c0064
025b0064025a006402590064025800640257006402560064025500640254
006402530064025200640251006402500064024f0064024e0064024d0064
024c0064024b0064024a0064024900640248006402470064024600640245
00640244006402430064024200640241006402400064023f0064023e0064
023d0064023c0064023b0064023a00640239006402380064023700640236
0064023500640234006402330064023200640231006402300064022f0064
022e0064022d0064022c0064022b0064022a006402290064022800640227
006402260064022500640224006402230064022200640221006402200064
021f0064021e0064021d0064021c0064021b0064021a0064021900640218
006402170064021600640215006402140064021300640212006402110064
02100064020f0064020e0064020d0064020c0064020b0064020a00640209
006402080064020700640206006402050064020441ff0064020300640202
0064020100640200006401ff006401fe006401fd006401fc006401fb0064
01fa006401f9006401f8006401f7006401f6006401f5006401f4006401f3
006401f2006401f1006401f0006401ef006401ee006401ed006401ec0064
01eb006401ea006401e9006401e8006401e7006401e6006401e5006401e4
006401e3006401e2006401e1006401e0006401df006401de006401dd0064
01dc006401db006401da006401d9006401d8006401d7006401d6006401d5
006401d4006401d3006401d2006401d1006401d0006401cf006401ce0064
01cd006401cc006401cb006401ca006401c9006401c8006401c7006401c6
006401c5006401c4006401c3006401c2006401c1006401c0006401bf0064
01be006401bd006401bc006401bb006401ba006401b9006401b8006401b7
006401b6006401b5006401b4006401b3006401b2006401b1006401b00064
01af006401ae006401ad006401ac006401ab006401aa006401a9006401a8
006401a7006401a6006401a5006401a4006401a3006401a2006401a10064
01a00064019f0064019e0064019d0064019c0064019b0064019a00640199
006401980064019700640196006401950064019400640193006401920064
0191006401900064018f0064018e0064018d0064018c0064018b0064018a
006401890064018800640187006401860064018500644180018400640183
0064018200640181006401800064017f0064017e0064017d0064017c0064
017b0064017a006401790064017800640177006401760064017500640174
006401730064017200640171006401700064016f0064016e0064016d0064
016c0064016b0064016a0064016900640168006401670064016600640165
00640164006401630064016200640161006401600064015f0064015e0064
015d0064015c0064015b0064015a00640159006401580064015700640156
00640155006401540064015300640152006401500064014f0064014e0064
014c0064014b0064014a0064014900640148006401470064014600640145
006401440064014300642b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b59
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b185f5e00>
[2871 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd

2 0 3 <> HIBBAA+Calibri AddT42Char 
2 0 0 <00050000fe7303d2050e000300070039004d004e005bbc000d0152001600
3a01b5b5154444082d07be0143000200200154000800010143400f04020d
b71a1a3f23b735068d031149b8012db43f078d0202003ffddefdce2ffdde
ed12392fed012fdde1dee110f1ce11392f33e1d4e1313001112111011121
1101140e020707140623222e02352726363333323e0235342623220e0223
222e02353436373e0333321e0203140e0223222e0235343e0233321e0201
03d2fc5a034ffd06027e233f5633051e1a0f140d0605021c18122d3c2510
535b253c2e1d0703070603050807283742224b6c4522da07111d15161d12
0808121d16151d1107fddb050efaf2050efb43046cfb9403063b5c3f2403
980a0802040606b81e18192a3b2149560f1310040b13101116080712110c
28445cfd86151c120808121c15151d120808121dfd4d>HIBBAA+Calibri AddT42Char 
HIBBAA+Calibri /CharStrings get begin
/space 3 def
end
HIBBAA+Calibri /Encoding get
dup 32 /space put
pop
end
%ADOEndSubsetFont
/HETXEF+Calibri /HIBBAA+Calibri findfont ct_VMDictPut
/HETXEF+Calibri*1 
[32{/.notdef}rp /space 223{/.notdef}rp]
HETXEF+Calibri nf
HETXEF+Calibri*1 [10.56 0 0 -10.56 0 0 ]msf
406.792 -8.54602 mo
( )sh
gsave
2.35179 238.804 mo
398.588 238.804 li
398.588 1.5595 li
2.35179 1.55937 li
2.35179 238.804 li
clp
114.679 19.8526 mo
83.8198 19.8526 li
83.8198 4.11222 li
114.679 4.11222 li
114.679 19.8526 li
/1 
[/DeviceCMYK] /CSA add_res
.792019 .373327 .00415045 0 cmyk
f
82.9343 24.2401 mo
82.9343 23.3117 li
114.679 23.3117 li
114.679 4.11222 li
83.8198 4.11222 li
83.8198 24.2401 li
82.9343 24.2401 li
82.9343 23.3117 li
82.9343 24.2401 li
82.0489 24.2401 li
82.0489 3.18365 li
82.0489 2.93917 82.1434 2.70004 82.3082 2.52712 cv
82.4732 2.35421 82.7012 2.25521 82.9343 2.25521 cv
115.564 2.25521 li
115.797 2.25521 116.025 2.35421 116.19 2.52712 cv
116.355 2.70004 116.45 2.93917 116.45 3.18365 cv
116.45 24.2401 li
116.45 24.4846 116.355 24.7239 116.19 24.8968 cv
116.025 25.0696 115.797 25.1687 115.564 25.1687 cv
82.9343 25.1687 li
82.7012 25.1687 82.4731 25.0696 82.3082 24.8968 cv
82.1434 24.7239 82.0489 24.4846 82.0489 24.2401 cv
82.9343 24.2401 li
1 /0 /CSD get_res sepcs
1 sep
f
390.773 19.8526 mo
128.164 19.8526 li
128.164 11.6574 li
390.773 11.6574 li
390.773 19.8526 li
.792019 .373327 .00415045 0 cmyk
f
127.278 24.2401 mo
127.278 23.3117 li
390.773 23.3117 li
390.773 11.6574 li
128.164 11.6574 li
128.164 24.2401 li
127.278 24.2401 li
127.278 23.3117 li
127.278 24.2401 li
126.393 24.2401 li
126.393 10.7288 li
126.393 10.4844 126.487 10.2452 126.652 10.0723 cv
126.817 9.8994 127.045 9.8004 127.278 9.8004 cv
391.658 9.8004 li
391.891 9.8004 392.119 9.8994 392.284 10.0723 cv
392.449 10.2452 392.544 10.4844 392.544 10.7288 cv
392.544 24.2401 li
392.544 24.4847 392.449 24.7239 392.284 24.8968 cv
392.119 25.0697 391.891 25.1687 391.658 25.1687 cv
127.278 25.1687 li
127.045 25.1687 126.817 25.0696 126.652 24.8968 cv
126.487 24.7239 126.393 24.4847 126.393 24.2401 cv
127.278 24.2401 li
1 /0 /CSD get_res sepcs
1 sep
f
385.383 65.8815 mo
385.383 197.725 li
389.569 193.623 li
389.569 62.3717 li
385.383 65.8815 li
.719081 .14258 0 0 cmyk
ef
385.383 65.8815 mo
385.826 65.8815 li
385.826 196.655 li
389.126 193.422 li
389.126 63.3374 li
385.66 66.244 li
385.383 65.8815 li
385.826 65.8815 li
385.383 65.8815 li
385.107 65.5189 li
389.292 62.0092 li
389.425 61.8973 389.606 61.8757 389.76 61.9533 cv
389.914 62.0309 390.011 62.1925 390.011 62.3717 cv
390.011 193.623 li
390.011 193.752 389.961 193.874 389.871 193.962 cv
385.686 198.064 li
385.557 198.19 385.369 198.224 385.207 198.151 cv
385.045 198.077 384.94 197.91 384.94 197.725 cv
384.94 65.8815 li
384.94 65.7406 385.002 65.607 385.107 65.5189 cv
385.383 65.8815 li
1 /0 /CSD get_res sepcs
1 sep
f
10.9808 58.9856 mo
11.1485 187.954 li
15.1644 193.623 li
15.1644 67.757 li
10.9808 58.9856 li
.719081 .14258 0 0 cmyk
ef
10.9808 58.9856 mo
11.4236 58.985 li
11.591 187.8 li
14.7216 192.219 li
14.7216 67.8668 li
10.5849 59.1933 li
10.9808 58.9856 li
11.4236 58.985 li
10.9808 58.9856 li
11.3768 58.778 li
15.5603 67.5494 li
15.6071 67.757 li
15.6071 193.623 li
15.6071 193.824 15.485 194.001 15.3035 194.064 cv
15.1219 194.127 14.923 194.061 14.809 193.9 cv
10.7932 188.23 li
10.7367 188.151 10.7059 188.053 10.7058 187.954 cv
10.5381 58.9863 li
10.5378 58.7704 10.6785 58.5837 10.8788 58.5339 cv
11.0792 58.4841 11.2847 58.5848 11.3768 58.778 cv
10.9808 58.9856 li
1 /0 /CSD get_res sepcs
1 sep
f
385.613 233.864 mo
384.907 233.305 li
390.331 225.772 li
390.764 26.9672 li
384.323 40.4806 li
386.499 233.853 li
385.613 233.864 li
384.907 233.305 li
385.613 233.864 li
384.728 233.875 li
382.55 40.2775 li
382.548 40.1307 382.581 39.9827 382.643 39.8515 cv
390.866 22.5994 li
391.05 22.2132 391.462 22.0114 391.863 22.1111 cv
392.263 22.2107 392.545 22.5849 392.544 23.0167 cv
392.101 226.086 li
392.1 226.288 392.038 226.482 391.922 226.643 cv
386.32 234.424 li
386.091 234.741 385.698 234.871 385.337 234.746 cv
384.976 234.622 384.733 234.273 384.728 233.875 cv
385.613 233.864 li
f
10.1445 224.802 mo
10.3368 224.687 li
16.616 236.209 li
16.5473 40.429 li
10.366 24.2213 li
10.366 224.802 li
10.1445 224.802 li
10.3368 224.687 li
10.1445 224.802 li
9.92284 224.802 li
9.92284 23.0146 li
9.92284 22.903 9.99806 22.8074 10.1025 22.7864 cv
10.2069 22.7653 10.3107 22.8247 10.3502 22.9282 cv
16.9746 40.2979 li
16.9904 40.3841 li
17.0595 237.085 li
17.0595 237.19 16.9919 237.283 16.8948 237.31 cv
16.7978 237.337 16.6953 237.292 16.6455 237.2 cv
9.9521 224.917 li
9.92284 224.802 li
10.1445 224.802 li
f
16.8379 226.557 mo
383.294 226.557 li
383.294 40.5606 li
16.8379 40.5605 li
16.8379 226.557 li
1 /0 /CSD get_res sepcs
.153 sep
ef
16.8379 226.557 mo
16.8379 225.628 li
382.408 225.628 li
382.408 41.4892 li
17.7234 41.4891 li
17.7234 226.557 li
16.8379 226.557 li
16.8379 225.628 li
16.8379 226.557 li
15.9524 226.557 li
15.9524 40.5606 li
15.9524 40.316 16.0468 40.0769 16.2118 39.904 cv
16.3766 39.7311 16.6048 39.6321 16.8379 39.6321 cv
383.293 39.6321 li
383.527 39.6321 383.755 39.7311 383.92 39.904 cv
384.084 40.0769 384.179 40.316 384.179 40.5606 cv
384.179 226.557 li
384.179 226.801 384.085 227.04 383.92 227.213 cv
383.755 227.386 383.527 227.485 383.294 227.485 cv
16.8379 227.485 li
16.3489 227.485 15.9524 227.07 15.9524 226.557 cv
16.8379 226.557 li
1 /0 /CSD get_res sepcs
.851 sep
f
16.8379 237.085 mo
16.3447 236.619 li
58.2494 187.889 li
52.3148 178.554 li
10.9785 226.227 li
17.3967 236.709 li
16.8379 237.085 li
16.3447 236.619 li
16.8379 237.085 li
16.279 237.461 li
9.58562 226.53 li
9.42303 226.265 9.45071 225.919 9.65302 225.685 cv
51.9041 176.957 li
52.0414 176.799 52.2419 176.715 52.4452 176.731 cv
52.6487 176.747 52.8349 176.861 52.948 177.039 cv
59.6409 187.567 li
59.8089 187.832 59.7843 188.184 59.5816 188.42 cv
17.331 237.551 li
17.193 237.712 16.9894 237.797 16.7838 237.779 cv
16.5782 237.761 16.3906 237.643 16.279 237.461 cv
16.8379 237.085 li
1 /0 /CSD get_res sepcs
1 sep
f
17.172 40.9599 mo
17.1717 40.7274 li
383.458 40.1088 li
391.3 23.6493 li
10.4778 23.6493 li
17.3764 40.8699 li
17.172 40.9599 li
17.1717 40.7274 li
17.172 40.9599 li
16.9677 41.0499 li
9.94008 23.5068 li
9.95993 23.2882 li
10.1445 23.1845 li
391.658 23.1845 li
391.847 23.2947 li
391.856 23.5208 li
383.793 40.4447 li
383.595 40.5732 li
17.1723 41.1922 li
16.9677 41.0499 li
17.172 40.9599 li
f
16.8379 40.5575 mo
17.331 40.0911 li
57.0206 86.2445 li
51.825 72.9866 li
12.2055 26.8572 li
17.4525 40.2936 li
16.8379 40.5575 li
17.331 40.0911 li
16.8379 40.5575 li
16.2233 40.8213 li
9.52986 23.6808 li
9.40749 23.3676 9.51785 23.0071 9.79119 22.8272 cv
10.0644 22.6471 10.4219 22.6993 10.6379 22.9508 cv
52.889 72.1441 li
53.0098 72.3454 li
59.7027 89.4242 li
59.8253 89.7373 59.7154 90.0979 59.4422 90.2782 cv
59.1691 90.4586 58.8114 90.4066 58.5952 90.1553 cv
16.3447 41.0239 li
16.2233 40.8213 li
16.8379 40.5575 li
f
59.0884 187.954 mo
59.0884 187.025 li
340.576 187.025 li
340.576 90.6193 li
59.9738 90.6192 li
59.9738 187.954 li
59.0884 187.954 li
59.0884 187.025 li
59.0884 187.954 li
58.2029 187.954 li
58.2029 89.6908 li
58.2029 89.4463 58.2974 89.207 58.4623 89.0341 cv
58.6272 88.8613 58.8552 88.7622 59.0884 88.7622 cv
341.461 88.7622 li
341.694 88.7622 341.922 88.8613 342.087 89.0342 cv
342.252 89.2072 342.346 89.4463 342.346 89.6908 cv
342.346 187.954 li
342.346 188.198 342.252 188.437 342.087 188.61 cv
341.922 188.783 341.694 188.882 341.461 188.882 cv
59.0884 188.882 li
58.8552 188.882 58.6272 188.783 58.4623 188.61 cv
58.2974 188.437 58.2029 188.198 58.2029 187.954 cv
59.0884 187.954 li
1 /0 /CSD get_res sepcs
.851 sep
f
349.41 72.146 mo
348.919 71.6775 li
391.167 22.9485 li
391.391 22.6903 391.763 22.6458 392.036 22.8443 cv
392.31 23.0428 392.401 23.4236 392.249 23.7342 cv
383.885 40.8747 li
383.789 41.0213 li
341.954 90.1527 li
341.734 90.4114 341.367 90.4608 341.091 90.2691 cv
340.816 90.0771 340.717 89.7032 340.859 89.39 cv
348.81 71.8471 li
348.919 71.6775 li
349.41 72.146 li
350.01 72.445 li
344.044 85.6069 li
382.741 40.1606 li
388.796 27.7534 li
349.901 72.6145 li
349.41 72.146 li
350.01 72.445 li
349.41 72.146 li
1 /0 /CSD get_res sepcs
1 sep
f
341.459 187.747 mo
341.944 187.271 li
384.284 234.76 li
390.799 225.517 li
349.452 178.038 li
341.984 188.173 li
341.459 187.747 li
341.944 187.271 li
341.459 187.747 li
340.933 187.321 li
348.885 176.53 li
349.005 176.367 349.186 176.269 349.383 176.26 cv
349.58 176.252 349.768 176.334 349.9 176.487 cv
392.149 225.001 li
392.362 225.246 392.381 225.617 392.192 225.884 cv
384.878 236.26 li
384.761 236.426 384.579 236.53 384.383 236.542 cv
384.186 236.554 383.994 236.473 383.859 236.322 cv
340.974 188.222 li
340.752 187.974 340.735 187.591 340.933 187.321 cv
341.459 187.747 li
f
52.3955 176.956 mo
52.3955 176.028 li
348.522 176.028 li
348.522 73.5432 li
53.2809 73.543 li
53.2809 176.956 li
52.3955 176.956 li
52.3955 176.028 li
52.3955 176.956 li
51.51 176.956 li
51.51 72.6145 li
51.51 72.37 51.6046 72.1309 51.7694 71.9579 cv
51.9343 71.785 52.1624 71.686 52.3955 71.686 cv
349.408 71.686 li
349.641 71.686 349.869 71.7852 350.034 71.9579 cv
350.199 72.1309 350.293 72.3701 350.293 72.6146 cv
350.293 176.956 li
350.293 177.201 350.199 177.44 350.034 177.613 cv
349.869 177.786 349.641 177.885 349.408 177.885 cv
52.3955 177.885 li
51.9065 177.885 51.51 177.469 51.51 176.956 cv
52.3955 176.956 li
f
58.3593 88.8408 mo
58.3593 88.6085 li
342.045 88.6085 li
349.471 72.3783 li
52.3046 72.3783 li
58.565 88.7544 li
58.3593 88.8408 li
58.3593 88.6085 li
58.3593 88.8408 li
58.1537 88.9273 li
51.7713 72.2323 li
51.7934 72.0157 li
51.977 71.9135 li
349.823 71.9135 li
350.011 72.0222 li
350.023 72.2464 li
342.385 88.9414 li
342.185 89.0732 li
58.3593 89.0732 li
58.2691 89.0732 58.1873 89.0152 58.1537 88.9273 cv
58.3593 88.8408 li
f
52.3955 177.425 mo
52.5728 177.286 li
58.4521 185.506 li
58.8666 94.1126 li
53.029 74.5214 li
52.6171 177.426 li
52.3955 177.425 li
52.5728 177.286 li
52.3955 177.425 li
52.174 177.424 li
52.5919 73.0178 li
52.5923 72.9035 52.6727 72.8059 52.7805 72.789 cv
52.8882 72.772 52.9924 72.8403 53.025 72.9495 cv
59.2999 94.0084 li
59.31 94.0788 li
58.8921 186.2 li
58.8915 186.299 58.8303 186.388 58.7401 186.419 cv
58.6498 186.451 58.5502 186.418 58.4932 186.338 cv
52.2182 177.565 li
52.174 177.424 li
52.3955 177.425 li
f
59.0884 187.076 mo
59.0885 186.844 li
341.758 186.967 li
349.342 177.658 li
52.4283 177.658 li
59.2638 186.934 li
59.0884 187.076 li
59.0885 186.844 li
59.0884 187.076 li
58.9131 187.218 li
51.8016 177.567 li
51.7781 177.323 li
51.977 177.193 li
349.823 177.193 li
350.024 177.328 li
349.992 177.576 li
342.029 187.35 li
341.86 187.431 li
59.0884 187.309 li
58.9131 187.218 li
59.0884 187.076 li
f
341.459 187.954 mo
341.285 187.809 li
349.602 176.875 li
349.602 73.1302 li
341.68 89.7437 li
341.68 187.954 li
341.459 187.954 li
341.285 187.809 li
341.459 187.954 li
341.237 187.954 li
341.237 89.6889 li
341.26 89.585 li
349.625 72.0421 li
349.671 71.9454 349.774 71.895 349.874 71.9198 cv
349.974 71.9446 350.045 72.0379 350.045 72.146 cv
350.045 176.956 li
349.996 177.101 li
341.632 188.098 li
341.385 188.173 li
341.296 188.14 341.237 188.053 341.237 187.954 cv
341.459 187.954 li
f
93.8433 40.5575 mo
115.561 40.5575 li
112.125 24.2401 li
90.4607 24.2401 li
93.8433 40.5575 li
.719081 .14258 0 0 cmyk
ef
93.8433 40.5575 mo
93.8433 40.0932 li
115.009 40.0932 li
111.769 24.7044 li
91.01 24.7044 li
94.2758 40.4588 li
93.8433 40.5575 li
93.8433 40.0932 li
93.8433 40.5575 li
93.4106 40.6561 li
90.0282 24.3387 li
89.9996 24.2011 90.0317 24.0586 90.1161 23.9488 cv
90.2004 23.8391 90.3263 23.7758 90.4607 23.7758 cv
112.125 23.7758 li
112.332 23.7758 112.513 23.9279 112.557 24.1401 cv
115.993 40.4573 li
116.022 40.595 115.99 40.7383 115.906 40.8482 cv
115.822 40.9581 115.695 41.0217 115.561 41.0217 cv
93.8433 41.0217 li
93.6347 41.0217 93.4549 40.8698 93.4106 40.6561 cv
93.8433 40.5575 li
1 /0 /CSD get_res sepcs
1 sep
f
175.382 33.5378 mo
348.572 33.5378 li
350.661 24.7663 li
174.131 24.7663 li
175.382 33.5378 li
.719081 .14258 0 0 cmyk
ef
175.382 33.5378 mo
175.382 33.0736 li
348.226 33.0736 li
350.095 25.2306 li
174.645 25.2306 li
175.82 33.4692 li
175.382 33.5378 li
175.382 33.0736 li
175.382 33.5378 li
174.944 33.6065 li
173.693 24.835 li
173.674 24.7022 173.712 24.5651 173.795 24.4633 cv
173.879 24.3616 174.003 24.302 174.131 24.302 cv
350.661 24.3022 li
350.797 24.3022 350.927 24.3682 351.01 24.4807 cv
351.094 24.593 351.124 24.7406 351.091 24.8789 cv
349.001 33.6503 li
348.952 33.857 348.775 34.0021 348.572 34.0021 cv
175.382 34.0021 li
175.163 34.0021 174.977 33.8338 174.944 33.6065 cv
175.382 33.5378 li
1 /0 /CSD get_res sepcs
1 sep
f
384.53 216.252 mo
384.179 215.849 li
384.179 185.076 li
384.53 216.252 li
.215183 .168276 .168276 0 cmyk
f
389.468 221.923 mo
386.324 218.312 li
386.092 197.666 li
389.871 193.962 li
389.961 193.874 390.011 193.752 390.011 193.623 cv
390.011 62.3717 li
390.011 62.1925 389.914 62.0309 389.76 61.9533 cv
389.699 61.9224 389.633 61.9072 389.568 61.9072 cv
389.47 61.9072 389.372 61.9418 389.292 62.0092 cv
385.107 65.5189 li
385.383 65.8815 li
385.107 65.5189 li
385.002 65.607 384.94 65.7406 384.94 65.8815 cv
384.94 95.3469 li
384.323 40.4806 li
390.764 26.9672 li
390.339 221.922 li
389.468 221.923 li
.536645 .416449 .539422 .119112 cmyk
f
386.078 196.409 mo
385.826 174.042 li
385.826 66.1046 li
389.126 63.3374 li
389.126 193.422 li
386.078 196.409 li
.585534 .416999 .534905 .134798 cmyk
f
386.092 197.666 mo
386.078 196.409 li
389.126 193.422 li
389.126 63.3374 li
385.826 66.1046 li
385.826 174.042 li
384.94 95.3469 li
384.94 65.8815 li
384.94 65.7406 385.002 65.607 385.107 65.5189 cv
385.383 65.8815 li
385.107 65.5189 li
389.292 62.0092 li
389.372 61.9418 389.47 61.9072 389.568 61.9072 cv
389.633 61.9072 389.699 61.9224 389.76 61.9533 cv
389.914 62.0309 390.011 62.1925 390.011 62.3717 cv
390.011 193.623 li
390.011 193.752 389.961 193.874 389.871 193.962 cv
386.092 197.666 li
.570031 .447425 .573754 .176974 cmyk
f
390.339 221.922 mo
390.764 26.9672 li
384.323 40.4806 li
384.94 95.3469 li
385.826 174.042 li
386.078 196.409 li
386.092 197.666 li
386.324 218.312 li
384.53 216.252 li
384.179 185.076 li
384.179 40.5606 li
384.179 40.4824 384.169 40.4047 384.151 40.3296 cv
390.773 26.7589 li
390.773 221.921 li
390.339 221.922 li
.623621 .546166 .537194 .275242 cmyk
f
11.3531 222.387 mo
11.4011 189.089 li
14.809 193.9 li
14.8942 194.02 15.0269 194.088 15.1642 194.088 cv
15.2106 194.088 15.2576 194.08 15.3035 194.064 cv
15.485 194.001 15.6071 193.824 15.6071 193.623 cv
15.6071 67.757 li
15.5603 67.5494 li
11.5884 59.2217 li
11.6319 29.0638 li
16.0022 40.2551 li
15.9696 40.3528 15.9524 40.4562 15.9524 40.5606 cv
15.9524 218.42 li
12.5138 222.386 li
11.3531 222.387 li
.536645 .416449 .539422 .119112 cmyk
f
14.7216 192.219 mo
11.591 187.8 li
11.5019 119.232 li
11.5854 61.2912 li
14.7216 67.8668 li
14.7216 192.219 li
.585534 .416999 .534905 .134798 cmyk
f
15.1642 194.088 mo
15.0269 194.088 14.8942 194.02 14.809 193.9 cv
11.4011 189.089 li
11.5019 119.232 li
11.591 187.8 li
14.7216 192.219 li
14.7216 67.8668 li
11.5854 61.2912 li
11.5884 59.2217 li
15.5603 67.5494 li
15.6071 67.757 li
15.6071 193.623 li
15.6071 193.824 15.485 194.001 15.3035 194.064 cv
15.2576 194.08 15.2106 194.088 15.1642 194.088 cv
.570031 .447425 .573754 .176974 cmyk
f
30.3915 222.364 mo
59.1842 188.882 li
341.461 188.882 li
341.493 188.882 341.525 188.88 341.557 188.877 cv
371.041 221.946 li
30.3915 222.364 li
17.7234 216.378 mo
17.7234 42.627 li
51.51 81.9162 li
51.51 176.956 li
51.9047 176.956 li
51.9047 176.956 li
51.51 176.956 li
51.51 177.088 51.5362 177.213 51.5834 177.327 cv
17.7234 216.378 li
382.408 213.815 mo
350.293 176.937 li
350.293 80.359 li
382.408 42.6431 li
382.408 213.815 li
348.928 71.686 mo
348.928 71.686 li
348.919 71.6775 li
348.913 71.686 li
52.4956 71.686 li
26.56 41.4891 li
375.092 41.4892 li
348.919 71.6775 li
348.928 71.686 li
.289158 .230076 .233066 0 cmyk
f
15.9524 218.42 mo
15.9524 40.5606 li
15.9524 40.4562 15.9696 40.3528 16.0022 40.2551 cv
16.2233 40.8213 li
16.3447 41.0239 li
17.7234 42.627 li
17.7234 216.378 li
15.9524 218.42 li
384.179 215.849 mo
382.408 213.815 li
382.408 42.6431 li
383.789 41.0213 li
383.885 40.8747 li
384.151 40.3296 li
384.169 40.4047 384.179 40.4824 384.179 40.5606 cv
384.179 185.076 li
384.179 215.849 li
375.092 41.4892 mo
26.56 41.4891 li
26.2918 41.1768 li
375.875 40.5862 li
375.092 41.4892 li
.58114 .496651 .492714 .173404 cmyk
f
14.3109 222.384 mo
15.9524 220.49 li
15.9524 222.382 li
14.3109 222.384 li
.520775 .371191 .585779 .100069 cmyk
f
17.7234 222.379 mo
17.7234 218.448 li
52.3148 178.554 li
58.2029 187.816 li
58.2029 187.943 li
28.6011 222.366 li
17.7234 222.379 li
.493172 .353094 .543145 .0631113 cmyk
f
15.9524 222.382 mo
15.9524 220.49 li
17.7234 218.448 li
17.7234 222.379 li
15.9524 222.382 li
.523156 .380224 .586786 .107546 cmyk
f
12.5138 222.386 mo
15.9524 218.42 li
17.7234 216.378 li
51.5834 177.327 li
51.6567 177.503 51.7808 177.651 51.9363 177.75 cv
58.2029 186.255 li
58.2029 187.816 li
52.3148 178.554 li
17.7234 218.448 li
15.9524 220.49 li
14.3109 222.384 li
12.5138 222.386 li
28.6011 222.366 mo
58.2029 187.943 li
58.2029 187.954 li
59.0884 187.954 li
58.2029 187.954 li
58.2029 188.198 58.2974 188.437 58.4623 188.61 cv
58.6272 188.783 58.8552 188.882 59.0884 188.882 cv
59.1842 188.882 li
30.3915 222.364 li
28.6011 222.366 li
.623621 .546166 .537194 .275242 cmyk
f
376.702 39.6321 mo
115.819 39.6321 li
112.774 25.1687 li
115.564 25.1687 li
115.797 25.1687 116.025 25.0696 116.19 24.8968 cv
116.332 24.7479 116.422 24.5499 116.444 24.3417 cv
126.398 24.3417 li
126.42 24.55 126.51 24.7479 126.652 24.8968 cv
126.817 25.0696 127.045 25.1687 127.278 25.1687 cv
173.74 25.1687 li
174.944 33.6065 li
174.977 33.8338 175.163 34.0021 175.382 34.0021 cv
348.572 34.0021 li
348.775 34.0021 348.952 33.857 349.001 33.6503 cv
351.022 25.1687 li
389.242 25.1687 li
376.702 39.6321 li
93.1983 39.6321 mo
24.9651 39.6321 li
11.8325 24.3417 li
82.0543 24.3417 li
82.0766 24.5499 82.1664 24.7479 82.3082 24.8968 cv
82.4731 25.0696 82.7012 25.1687 82.9343 25.1687 cv
90.2002 25.1687 li
93.1983 39.6321 li
.348272 .231052 .380133 .000488289 cmyk
f
115.564 25.1687 mo
112.774 25.1687 li
112.6 24.3417 li
116.444 24.3417 li
116.422 24.5499 116.332 24.7479 116.19 24.8968 cv
116.025 25.0696 115.797 25.1687 115.564 25.1687 cv
90.2002 25.1687 mo
82.9343 25.1687 li
82.7012 25.1687 82.4731 25.0696 82.3082 24.8968 cv
82.1664 24.7479 82.0766 24.5499 82.0543 24.3417 cv
90.0288 24.3417 li
90.2002 25.1687 li
.545067 .403967 .586908 .131441 cmyk
f
389.242 25.1687 mo
351.022 25.1687 li
351.091 24.8789 li
351.124 24.7406 351.094 24.593 351.01 24.4807 cv
350.965 24.4197 350.906 24.3723 350.84 24.3417 cv
389.959 24.3417 li
389.242 25.1687 li
173.74 25.1687 mo
127.278 25.1687 li
127.045 25.1687 126.817 25.0696 126.652 24.8968 cv
126.51 24.7479 126.42 24.55 126.398 24.3417 cv
173.952 24.3417 li
173.892 24.3694 173.838 24.4107 173.795 24.4633 cv
173.712 24.5651 173.674 24.7022 173.693 24.835 cv
173.74 25.1687 li
f
25.8932 40.7127 mo
24.9651 39.6321 li
93.1983 39.6321 li
93.3987 40.5987 li
25.8932 40.7127 li
116.003 40.5605 mo
116.004 40.5262 116 40.4916 115.993 40.4573 cv
115.819 39.6321 li
376.702 39.6321 li
376.278 40.1209 li
116.003 40.5605 li
.516075 .382605 .559197 .097322 cmyk
f
26.2918 41.1768 mo
25.8932 40.7127 li
93.3987 40.5987 li
93.4106 40.6561 li
93.4549 40.8698 93.6347 41.0217 93.8433 41.0217 cv
115.561 41.0217 li
115.695 41.0217 115.822 40.9581 115.906 40.8482 cv
115.969 40.7656 116.003 40.6642 116.003 40.5605 cv
376.278 40.1209 li
375.875 40.5862 li
26.2918 41.1768 li
.623621 .546166 .537194 .275242 cmyk
f
51.51 79.8365 mo
18.5332 41.4891 li
24.7725 41.4891 li
51.51 72.6198 li
51.51 79.8365 li
.493172 .353094 .543145 .0631113 cmyk
f
24.7725 41.4891 mo
18.5332 41.4891 li
18.2763 41.1904 li
24.5069 41.1798 li
24.7725 41.4891 li
.523156 .380224 .586786 .107546 cmyk
f
23.1775 39.6321 mo
17.1942 39.6321 li
12.2055 26.8572 li
23.1775 39.6321 li
.497536 .350347 .562585 .0688487 cmyk
f
17.8772 40.7262 mo
17.4087 40.1815 li
17.1942 39.6321 li
23.1775 39.6321 li
24.1082 40.7157 li
17.8772 40.7262 li
.516777 .366278 .58996 .0966201 cmyk
f
18.2763 41.1904 mo
17.8772 40.7262 li
24.1082 40.7157 li
24.5069 41.1798 li
18.2763 41.1904 li
.534173 .384375 .596002 .11783 cmyk
f
51.51 81.9162 mo
17.7234 42.627 li
16.3447 41.0239 li
16.2233 40.8213 li
16.0022 40.2551 li
11.6319 29.0638 li
11.6387 24.3417 li
11.8325 24.3417 li
24.9651 39.6321 li
25.8932 40.7127 li
26.2918 41.1768 li
26.56 41.4891 li
52.4956 71.686 li
52.3955 71.686 li
52.1624 71.686 51.9343 71.785 51.7694 71.9579 cv
51.6046 72.1309 51.51 72.37 51.51 72.6145 cv
51.51 72.6198 li
24.7725 41.4891 li
24.5069 41.1798 li
24.1082 40.7157 li
23.1775 39.6321 li
12.2055 26.8572 li
17.1942 39.6321 li
17.4087 40.1815 li
17.8772 40.7262 li
18.2763 41.1904 li
18.5332 41.4891 li
51.51 79.8365 li
51.51 81.9162 li
.623621 .546166 .537194 .275242 cmyk
f
341.461 188.882 mo
59.1842 188.882 li
59.0884 188.882 li
58.8552 188.882 58.6272 188.783 58.4623 188.61 cv
58.2974 188.437 58.2029 188.198 58.2029 187.954 cv
59.0884 187.954 li
58.2029 187.954 li
58.2029 187.943 li
58.2029 187.816 li
58.2029 186.255 li
58.9131 187.218 li
59.0884 187.309 li
340.867 187.431 li
340.742 187.688 340.78 188.006 340.974 188.222 cv
341.557 188.877 li
341.525 188.88 341.493 188.882 341.461 188.882 cv
.58114 .496651 .492714 .173404 cmyk
f
350.293 78.2679 mo
350.293 72.6146 li
350.293 72.4877 350.268 72.3623 350.22 72.2468 cv
376.887 41.4892 li
381.61 41.4892 li
350.293 78.2679 li
.493172 .353094 .543145 .0631113 cmyk
f
381.61 41.4892 mo
376.887 41.4892 li
377.673 40.5832 li
382.388 40.5752 li
381.61 41.4892 li
.523156 .380224 .586786 .107546 cmyk
f
382.748 39.6321 mo
378.497 39.6321 li
387.938 28.7433 li
382.748 39.6321 li
.497536 .350347 .562585 .0688487 cmyk
f
382.999 39.6321 mo
382.748 39.6321 li
387.938 28.7433 li
388.796 27.7534 li
382.999 39.6321 li
.520348 .369421 .594324 .101472 cmyk
f
378.076 40.1179 mo
378.497 39.6321 li
382.748 39.6321 li
382.999 39.6321 li
382.766 40.1099 li
378.076 40.1179 li
.516777 .366278 .58996 .0966201 cmyk
f
377.673 40.5832 mo
378.076 40.1179 li
382.766 40.1099 li
382.741 40.1606 li
382.388 40.5752 li
377.673 40.5832 li
.534173 .384375 .596002 .11783 cmyk
f
350.293 80.359 mo
350.293 78.2679 li
381.61 41.4892 li
382.388 40.5752 li
382.741 40.1606 li
382.766 40.1099 li
382.999 39.6321 li
388.796 27.7534 li
387.938 28.7433 li
378.497 39.6321 li
378.076 40.1179 li
377.673 40.5832 li
376.887 41.4892 li
350.22 72.2468 li
350.176 72.1397 350.113 72.0411 350.034 71.9579 cv
349.869 71.7852 349.641 71.686 349.408 71.686 cv
348.928 71.686 li
348.919 71.6775 li
375.092 41.4892 li
375.875 40.5862 li
376.278 40.1209 li
376.702 39.6321 li
389.242 25.1687 li
389.959 24.3417 li
390.773 24.3417 li
390.773 26.7589 li
384.151 40.3296 li
383.885 40.8747 li
383.789 41.0213 li
382.408 42.6431 li
350.293 80.359 li
348.928 71.686 mo
348.913 71.686 li
348.919 71.6775 li
348.928 71.686 li
.623621 .546166 .537194 .275242 cmyk
f
384.179 221.93 mo
384.179 217.915 li
384.553 218.345 li
384.594 221.929 li
384.179 221.93 li
.484901 .342138 .529595 .0548104 cmyk
f
386.365 221.927 mo
386.348 220.405 li
387.672 221.925 li
386.365 221.927 li
.520775 .371191 .585779 .100069 cmyk
f
384.594 221.929 mo
384.553 218.345 li
386.348 220.405 li
386.365 221.927 li
384.594 221.929 li
.534173 .384375 .596002 .11783 cmyk
f
372.857 221.943 mo
342.346 187.723 li
342.346 187.681 li
347.905 180.137 li
349.537 178.135 li
382.408 215.881 li
382.408 221.932 li
372.857 221.943 li
.493172 .353094 .543145 .0631113 cmyk
f
382.408 221.932 mo
382.408 215.881 li
384.179 217.915 li
384.179 221.93 li
382.408 221.932 li
.523156 .380224 .586786 .107546 cmyk
f
342.346 187.723 mo
342.329 187.704 li
342.346 187.681 li
342.346 187.723 li
f
371.041 221.946 mo
341.557 188.877 li
340.974 188.222 li
340.78 188.006 340.742 187.688 340.867 187.431 cv
341.069 187.431 li
341.237 187.567 li
341.237 187.954 li
341.459 187.954 li
341.237 187.954 li
341.237 188.053 341.296 188.14 341.385 188.173 cv
341.632 188.098 li
344.625 184.163 li
347.905 180.137 li
342.346 187.681 li
342.329 187.704 li
342.346 187.723 li
372.857 221.943 li
371.041 221.946 li
387.672 221.925 mo
386.348 220.405 li
384.553 218.345 li
384.179 217.915 li
382.408 215.881 li
349.537 178.135 li
349.835 177.769 li
349.907 177.727 349.975 177.675 350.034 177.613 cv
350.199 177.44 350.293 177.201 350.293 176.956 cv
350.293 176.937 li
382.408 213.815 li
384.179 215.849 li
384.53 216.252 li
386.324 218.312 li
389.468 221.923 li
387.672 221.925 li
341.237 187.567 mo
341.069 187.431 li
341.237 187.431 li
341.237 187.567 li
.623621 .546166 .537194 .275242 cmyk
f
349.835 177.769 mo
349.992 177.576 li
350.024 177.328 li
349.892 177.239 li
349.996 177.101 li
350.045 176.956 li
350.045 72.146 li
350.045 72.0379 349.974 71.9446 349.874 71.9198 cv
349.857 71.9156 349.84 71.9135 349.823 71.9135 cv
349.823 71.9135 349.822 71.9135 349.822 71.9135 cv
51.977 71.9135 li
51.7934 72.0157 li
51.7713 72.2323 li
52.5865 74.3647 li
52.1758 176.956 li
51.9047 176.956 li
51.51 176.956 li
51.51 81.9162 li
51.51 79.8365 li
51.51 72.6198 li
51.51 72.6145 li
51.51 72.37 51.6046 72.1309 51.7694 71.9579 cv
51.9343 71.785 52.1624 71.686 52.3955 71.686 cv
52.4956 71.686 li
348.913 71.686 li
348.928 71.686 li
349.408 71.686 li
349.641 71.686 349.869 71.7852 350.034 71.9579 cv
350.113 72.0411 350.176 72.1397 350.22 72.2468 cv
350.268 72.3623 350.293 72.4877 350.293 72.6146 cv
350.293 78.2679 li
350.293 80.359 li
350.293 176.937 li
350.293 176.956 li
350.293 177.201 350.199 177.44 350.034 177.613 cv
349.975 177.675 349.907 177.727 349.835 177.769 cv
51.9363 177.75 mo
51.7808 177.651 51.6567 177.503 51.5834 177.327 cv
51.5362 177.213 51.51 177.088 51.51 176.956 cv
51.9047 176.956 li
52.1758 176.956 li
52.1749 177.193 li
51.977 177.193 li
51.7781 177.323 li
51.8016 177.567 li
51.9363 177.75 li
f
340.576 176.028 mo
59.9738 176.028 li
59.9738 90.6192 li
340.576 90.6193 li
340.576 176.028 li
58.2029 90.3267 mo
57.9167 89.3663 li
58.2029 89.6991 li
58.2029 90.3267 li
.289158 .230076 .233066 0 cmyk
f
57.0206 86.2445 mo
56.9684 86.1839 li
56.8784 85.8818 li
57.0206 86.2445 li
.493172 .353094 .543145 .0631113 cmyk
f
58.2029 89.6991 mo
57.9167 89.3663 li
56.9684 86.1839 li
57.0206 86.2445 li
56.8784 85.8818 li
56.4863 84.5658 li
58.1537 88.9273 li
58.1873 89.0152 58.2691 89.0732 58.3593 89.0732 cv
58.4272 89.0732 li
58.2841 89.2421 58.2029 89.4642 58.2029 89.6908 cv
58.2029 89.6991 li
.623621 .546166 .537194 .275242 cmyk
f
341.237 176.028 mo
340.576 176.028 li
340.576 90.6193 li
59.9738 90.6192 li
59.9738 176.028 li
58.9382 176.028 li
59.31 94.0788 li
59.2999 94.0084 li
58.2029 90.3267 li
58.2029 89.6991 li
58.2029 89.6908 li
58.2029 89.4642 58.2841 89.2421 58.4272 89.0732 cv
341.002 89.0732 li
340.859 89.39 li
340.717 89.7032 340.816 90.0771 341.091 90.2691 cv
341.138 90.3013 341.187 90.3268 341.237 90.3455 cv
341.237 176.028 li
.58114 .496651 .492714 .173404 cmyk
f
341.237 90.3455 mo
341.187 90.3268 341.138 90.3013 341.091 90.2691 cv
340.816 90.0771 340.717 89.7032 340.859 89.39 cv
341.002 89.0732 li
341.504 89.0732 li
341.26 89.585 li
341.237 89.6889 li
341.237 90.3455 li
.623621 .546166 .537194 .275242 cmyk
f
341.237 177.193 mo
58.9329 177.193 li
58.9382 176.028 li
59.9738 176.028 li
340.576 176.028 li
341.237 176.028 li
341.237 177.193 li
f
341.213 88.6085 mo
59.383 88.6085 li
53.4791 73.543 li
348.041 73.5432 li
341.213 88.6085 li
.381506 .257298 .41178 .00604257 cmyk
f
59.383 88.6085 mo
58.5093 88.6085 li
54.7991 78.9034 li
53.2809 73.8085 li
53.2809 73.543 li
53.4791 73.543 li
59.383 88.6085 li
.545067 .403967 .586908 .131441 cmyk
f
341.726 88.6085 mo
341.213 88.6085 li
348.041 73.5432 li
348.522 73.5432 li
348.522 74.3549 li
341.726 88.6085 li
f
348.522 74.3549 mo
348.522 73.5432 li
348.041 73.5432 li
53.4791 73.543 li
53.2809 73.543 li
53.2809 73.8085 li
53.025 72.9495 li
52.9958 72.8514 52.9088 72.7864 52.8134 72.7864 cv
52.8025 72.7864 52.7915 72.7872 52.7805 72.789 cv
52.6727 72.8059 52.5923 72.9035 52.5919 73.0178 cv
52.5914 73.1288 li
52.3046 72.3783 li
349.471 72.3783 li
348.522 74.3549 li
f
341.504 89.0732 mo
341.002 89.0732 li
58.4272 89.0732 li
58.3593 89.0732 li
58.2691 89.0732 58.1873 89.0152 58.1537 88.9273 cv
58.1537 88.9273 li
56.4863 84.5658 li
54.7991 78.9034 li
58.5093 88.6085 li
59.383 88.6085 li
341.213 88.6085 li
341.726 88.6085 li
341.504 89.0732 li
52.5865 74.3647 mo
51.7713 72.2323 li
51.7934 72.0157 li
51.977 71.9135 li
349.823 71.9135 li
349.74 71.9138 349.663 71.9621 349.625 72.0421 cv
349.465 72.3783 li
52.3046 72.3783 li
52.5914 73.1288 li
52.5865 74.3647 li
.623621 .546166 .537194 .275242 cmyk
f
58.2029 176.028 mo
53.2809 176.028 li
53.2809 83.9756 li
57.2061 88.54 li
58.2029 91.8852 li
58.2029 176.028 li
.531243 .410834 .528344 .109468 cmyk
f
56.2579 85.3576 mo
53.2809 81.8958 li
53.2809 76.7018 li
54.9407 80.9372 li
56.2579 85.3576 li
.549493 .424475 .576196 .146975 cmyk
f
57.2061 88.54 mo
53.2809 83.9756 li
53.2809 81.8958 li
56.2579 85.3576 li
57.2061 88.54 li
54.9407 80.9372 mo
53.2809 76.7018 li
53.2809 76.1812 li
54.381 79.0588 li
54.9407 80.9372 li
.567529 .452979 .576745 .182437 cmyk
f
58.4951 176.028 mo
58.2029 176.028 li
58.2029 91.8852 li
58.8666 94.1126 li
58.4951 176.028 li
.561852 .446632 .568963 .170199 cmyk
f
58.4898 177.193 mo
52.618 177.193 li
53.0251 75.5118 li
53.2809 76.1812 li
53.2809 76.7018 li
53.2809 81.8958 li
53.2809 83.9756 li
53.2809 176.028 li
58.2029 176.028 li
58.4951 176.028 li
58.4898 177.193 li
.567529 .452979 .576745 .182437 cmyk
f
54.381 79.0588 mo
53.2809 76.1812 li
53.0251 75.5118 li
53.029 74.5214 li
54.381 79.0588 li
f
58.9329 177.193 mo
58.4898 177.193 li
58.4951 176.028 li
58.8666 94.1126 li
58.2029 91.8852 li
57.2061 88.54 li
56.2579 85.3576 li
54.9407 80.9372 li
54.381 79.0588 li
53.029 74.5214 li
53.0251 75.5118 li
52.618 177.193 li
52.1749 177.193 li
52.1758 176.956 li
52.5865 74.3647 li
52.5914 73.1288 li
52.5919 73.0178 li
52.5923 72.9035 52.6727 72.8059 52.7805 72.789 cv
52.7915 72.7872 52.8025 72.7864 52.8134 72.7864 cv
52.9088 72.7864 52.9958 72.8514 53.025 72.9495 cv
53.2809 73.8085 li
54.7991 78.9034 li
56.4863 84.5658 li
56.8784 85.8818 li
56.9684 86.1839 li
57.9167 89.3663 li
58.2029 90.3267 li
59.2999 94.0084 li
59.31 94.0788 li
58.9382 176.028 li
58.9329 177.193 li
.623621 .546166 .537194 .275242 cmyk
f
340.576 186.966 mo
59.9738 186.844 li
59.9738 177.885 li
340.576 177.885 li
340.576 186.966 li
.366003 .294133 .299413 .00189212 cmyk
f
341.194 186.966 mo
340.576 186.966 li
340.576 177.885 li
341.237 177.885 li
341.237 186.908 li
341.194 186.966 li
59.9738 186.844 mo
59.1973 186.844 li
58.8357 186.353 li
58.8709 186.312 58.8918 186.258 58.8921 186.2 cv
58.9298 177.885 li
59.9738 177.885 li
59.9738 186.844 li
.524407 .440009 .440009 .0883192 cmyk
f
341.237 186.966 mo
341.194 186.966 li
341.237 186.908 li
341.237 186.966 li
.553643 .468543 .467384 .127504 cmyk
f
341.237 177.885 mo
340.576 177.885 li
59.9738 177.885 li
58.9298 177.885 li
58.9308 177.658 li
341.237 177.658 li
341.237 177.885 li
f
58.2029 185.158 mo
57.3585 183.977 li
53.4855 177.885 li
58.2029 177.885 li
58.2029 185.158 li
.497627 .396155 .459022 .0638743 cmyk
f
57.3585 183.977 mo
53.001 177.885 li
53.4855 177.885 li
57.3585 183.977 li
.517113 .414649 .488228 .0911269 cmyk
f
58.4521 185.506 mo
58.2029 185.158 li
58.2029 177.885 li
58.4866 177.885 li
58.4521 185.506 li
.513603 .419593 .471199 .0864271 cmyk
f
58.4866 177.885 mo
58.2029 177.885 li
53.4855 177.885 li
53.001 177.885 li
52.8388 177.658 li
58.4877 177.658 li
58.4866 177.885 li
.517113 .414649 .488228 .0911269 cmyk
f
58.8357 186.353 mo
52.4283 177.658 li
52.8388 177.658 li
53.001 177.885 li
57.3585 183.977 li
58.2029 185.158 li
58.4521 185.506 li
58.4866 177.885 li
58.4877 177.658 li
58.9308 177.658 li
58.9298 177.885 li
58.8921 186.2 li
58.8918 186.258 58.8709 186.312 58.8357 186.353 cv
.553643 .468543 .467384 .127504 cmyk
f
341.237 187.431 mo
341.069 187.431 li
340.867 187.431 li
59.0884 187.309 li
58.9131 187.218 li
58.2029 186.255 li
51.9363 177.75 li
51.8016 177.567 li
51.7781 177.323 li
51.977 177.193 li
52.1749 177.193 li
52.618 177.193 li
58.4898 177.193 li
58.9329 177.193 li
341.237 177.193 li
341.237 177.658 li
58.9308 177.658 li
58.4877 177.658 li
52.8388 177.658 li
52.4283 177.658 li
58.8357 186.353 li
59.1973 186.844 li
59.9738 186.844 li
340.576 186.966 li
341.194 186.966 li
341.237 186.966 li
341.237 187.431 li
344.625 184.163 mo
349.892 177.239 li
350.024 177.328 li
349.992 177.576 li
349.835 177.769 li
349.537 178.135 li
347.905 180.137 li
344.625 184.163 li
.623621 .546166 .537194 .275242 cmyk
f
348.522 176.028 mo
342.346 176.028 li
342.346 89.6908 li
348.522 82.4388 li
348.522 176.028 li
.531243 .410834 .528344 .109468 cmyk
f
342.346 176.028 mo
341.68 176.028 li
341.68 90.3456 li
341.783 90.3076 341.877 90.2429 341.954 90.1527 cv
342.346 89.6918 li
342.346 176.028 li
.561852 .446632 .568963 .170199 cmyk
f
344.044 85.6069 mo
348.522 75.7269 li
348.522 80.3477 li
344.044 85.6069 li
.549493 .424475 .576196 .146975 cmyk
f
341.68 90.3456 mo
341.68 89.7437 li
342 89.0732 li
342.185 89.0732 li
342.385 88.9414 li
348.522 75.5265 li
348.522 75.7269 li
344.044 85.6069 li
348.522 80.3477 li
348.522 82.4388 li
342.346 89.6918 li
341.954 90.1527 li
341.877 90.2429 341.783 90.3076 341.68 90.3456 cv
.567529 .452979 .576745 .182437 cmyk
f
349.36 177.193 mo
341.68 177.193 li
341.68 176.028 li
342.346 176.028 li
348.522 176.028 li
348.522 82.4388 li
348.522 80.3477 li
348.522 75.7269 li
348.522 75.5265 li
349.602 73.1673 li
349.602 176.875 li
349.36 177.193 li
f
342.185 89.0732 mo
342 89.0732 li
349.602 73.1302 li
349.602 73.1673 li
348.522 75.5265 li
342.385 88.9414 li
342.185 89.0732 li
f
342.346 185.403 mo
342.346 177.885 li
347.887 177.885 li
342.346 185.403 li
.538445 .417365 .535821 .118715 cmyk
f
341.68 186.307 mo
341.68 177.885 li
342.346 177.885 li
342.346 185.403 li
341.68 186.307 li
.558373 .435767 .559197 .152621 cmyk
f
341.758 186.967 mo
341.68 186.967 li
341.68 186.307 li
342.346 185.403 li
347.887 177.885 li
348.833 177.885 li
344.285 183.865 li
341.758 186.967 li
.560052 .445472 .557916 .161654 cmyk
f
348.833 177.885 mo
347.887 177.885 li
342.346 177.885 li
341.68 177.885 li
341.68 177.658 li
349.006 177.658 li
348.833 177.885 li
f
341.68 187.29 mo
341.68 186.967 li
341.758 186.967 li
344.285 183.865 li
341.68 187.29 li
349.006 177.658 mo
341.68 177.658 li
341.68 177.193 li
349.36 177.193 li
349.006 177.658 li
.567529 .452979 .576745 .182437 cmyk
f
341.385 188.173 mo
341.296 188.14 341.237 188.053 341.237 187.954 cv
341.459 187.954 li
341.237 187.954 li
341.237 187.567 li
341.237 187.431 li
341.237 186.966 li
341.237 186.908 li
341.237 177.885 li
341.237 177.658 li
341.237 177.193 li
341.237 176.028 li
341.237 90.3455 li
341.237 89.6889 li
341.26 89.585 li
341.504 89.0732 li
341.726 88.6085 li
348.522 74.3549 li
349.465 72.3783 li
349.625 72.0421 li
349.663 71.9621 349.74 71.9138 349.822 71.9135 cv
349.822 71.9135 349.823 71.9135 349.823 71.9135 cv
349.84 71.9135 349.857 71.9156 349.874 71.9198 cv
349.974 71.9446 350.045 72.0379 350.045 72.146 cv
350.045 176.956 li
349.996 177.101 li
349.892 177.239 li
344.625 184.163 li
341.632 188.098 li
341.385 188.173 li
341.285 187.809 mo
341.459 187.954 li
341.285 187.809 li
341.68 186.967 mo
341.68 187.29 li
344.285 183.865 li
348.833 177.885 li
349.006 177.658 li
349.36 177.193 li
349.602 176.875 li
349.602 73.1673 li
349.602 73.1302 li
342 89.0732 li
341.68 89.7437 li
341.68 90.3456 li
341.68 176.028 li
341.68 177.193 li
341.68 177.658 li
341.68 177.885 li
341.68 186.307 li
341.68 186.967 li
.623621 .546166 .537194 .275242 cmyk
f
115.009 40.0932 mo
94.2001 40.0932 li
91.01 24.7044 li
111.769 24.7044 li
115.009 40.0932 li
.635035 .194247 .168215 .000122072 cmyk
f
115.561 41.0217 mo
93.8433 41.0217 li
93.6347 41.0217 93.4549 40.8698 93.4106 40.6561 cv
93.4106 40.6561 li
93.3987 40.5987 li
93.1983 39.6321 li
90.2002 25.1687 li
90.0288 24.3417 li
112.6 24.3417 li
112.774 25.1687 li
115.819 39.6321 li
115.993 40.4573 li
116 40.4916 116.004 40.5262 116.003 40.5605 cv
116.003 40.6642 115.969 40.7656 115.906 40.8482 cv
115.822 40.9581 115.695 41.0217 115.561 41.0217 cv
94.2001 40.0932 mo
115.009 40.0932 li
111.769 24.7044 li
91.01 24.7044 li
94.2001 40.0932 li
.623621 .546166 .537194 .275242 cmyk
f
348.226 33.0736 mo
175.764 33.0736 li
174.645 25.2306 li
350.095 25.2306 li
348.226 33.0736 li
.635035 .194247 .168215 .000122072 cmyk
f
348.572 34.0021 mo
175.382 34.0021 li
175.163 34.0021 174.977 33.8338 174.944 33.6065 cv
174.944 33.6065 li
173.74 25.1687 li
173.693 24.835 li
173.674 24.7022 173.712 24.5651 173.795 24.4633 cv
173.838 24.4107 173.892 24.3694 173.952 24.3417 cv
350.84 24.3417 li
350.906 24.3723 350.965 24.4197 351.01 24.4807 cv
351.094 24.593 351.124 24.7406 351.091 24.8789 cv
351.022 25.1687 li
349.001 33.6503 li
348.952 33.857 348.775 34.0021 348.572 34.0021 cv
175.764 33.0736 mo
348.226 33.0736 li
350.095 25.2306 li
174.645 25.2306 li
175.764 33.0736 li
.623621 .546166 .537194 .275242 cmyk
f
10.1445 226.154 mo
10.1445 225.225 li
390.773 225.225 li
390.773 24.3417 li
11.0298 24.3417 li
11.0299 226.154 li
10.1445 226.154 li
10.1445 225.225 li
10.1445 226.154 li
9.259 226.154 li
9.259 23.4132 li
9.259 23.1687 9.35342 22.9296 9.51823 22.7566 cv
9.68319 22.5837 9.91122 22.4846 10.1445 22.4846 cv
391.659 22.4847 li
391.892 22.4847 392.12 22.5837 392.285 22.7566 cv
392.45 22.9296 392.544 23.1687 392.544 23.4132 cv
392.544 226.154 li
392.544 226.398 392.45 226.637 392.285 226.81 cv
392.12 226.983 391.892 227.082 391.659 227.082 cv
10.1445 227.082 li
9.65536 227.082 9.259 226.667 9.259 226.154 cv
10.1445 226.154 li
1 /0 /CSD get_res sepcs
1 sep
f
8.05276 223.522 mo
8.05276 222.593 li
393.28 222.593 li
393.28 21.7097 li
8.93824 21.7096 li
8.93824 223.522 li
8.05276 223.522 li
8.05276 222.593 li
8.05276 223.522 li
7.1673 223.522 li
7.1673 20.7812 li
7.1673 20.2683 7.5638 19.8526 8.05276 19.8526 cv
394.166 19.8526 li
394.399 19.8526 394.627 19.9517 394.792 20.1245 cv
394.957 20.2974 395.051 20.5367 395.051 20.7812 cv
395.051 223.522 li
395.051 224.035 394.655 224.45 394.166 224.45 cv
8.05276 224.45 li
7.81965 224.45 7.59148 224.351 7.42667 224.178 cv
7.26172 224.005 7.1673 223.766 7.1673 223.522 cv
8.05276 223.522 li
f
18.3608 236.354 mo
25.9873 227.485 li
375.98 227.485 li
383.002 235.361 li
312.811 235.552 li
316.74 228.547 li
316.821 228.404 316.822 228.225 316.743 228.081 cv
316.665 227.937 316.517 227.847 316.359 227.847 cv
295.291 227.847 li
295.123 227.847 294.97 227.947 294.895 228.104 cv
291.318 235.61 li
18.3608 236.354 li
49.8835 233.722 mo
49.944 233.913 50.1123 234.04 50.3035 234.04 cv
224.33 234.04 li
224.547 234.04 224.732 233.875 224.767 233.652 cv
225.599 228.388 li
225.62 228.253 225.584 228.115 225.5 228.011 cv
225.416 227.908 225.292 227.847 225.163 227.847 cv
48.6305 227.847 li
48.4884 227.847 48.3544 227.919 48.2714 228.04 cv
48.1883 228.161 48.1656 228.317 48.2105 228.458 cv
49.8835 233.722 li
.497505 .209537 .80972 .0209659 cmyk
f
375.98 227.485 mo
25.9873 227.485 li
26.3339 227.082 li
335.026 227.082 li
375.654 227.12 li
375.98 227.485 li
.640101 .333837 1 .170016 cmyk
f
17.0591 235.788 mo
17.0561 227.485 li
24.1989 227.485 li
17.0591 235.788 li
.599634 .280858 1 .0955825 cmyk
f
16.6157 235.247 mo
12.6942 229.013 li
11.6423 227.082 li
16.1078 227.082 li
16.2265 227.263 16.4048 227.398 16.6129 227.455 cv
16.6157 235.247 li
.620325 .296208 1 .115541 cmyk
f
16.9995 235.857 mo
16.6157 235.247 li
16.6129 227.455 li
16.6848 227.475 16.7601 227.485 16.8379 227.485 cv
17.0561 227.485 li
17.0591 235.788 li
16.9995 235.857 li
12.6942 229.013 mo
12.3157 228.411 li
11.5022 227.082 li
11.6423 227.082 li
12.6942 229.013 li
.624903 .306096 1 .126406 cmyk
f
24.1989 227.485 mo
17.0561 227.485 li
16.8379 227.485 li
16.7601 227.485 16.6848 227.475 16.6129 227.455 cv
16.4048 227.398 16.2265 227.263 16.1078 227.082 cv
24.5455 227.082 li
24.1989 227.485 li
.622522 .297642 1 .117433 cmyk
f
17.3138 236.357 mo
16.9995 235.857 li
17.0591 235.788 li
24.1989 227.485 li
24.5455 227.082 li
26.3339 227.082 li
25.9873 227.485 li
18.3608 236.354 li
17.3138 236.357 li
12.3157 228.411 mo
11.48 227.082 li
11.5022 227.082 li
12.3157 228.411 li
.663111 .355413 1 .209751 cmyk
f
384.151 234.61 mo
377.799 227.485 li
383.294 227.485 li
383.527 227.485 383.755 227.386 383.92 227.213 cv
383.945 227.186 383.97 227.157 383.992 227.127 cv
384.652 227.128 li
384.728 233.846 li
384.151 234.61 li
.599634 .280858 1 .0955825 cmyk
f
386.468 231.136 mo
386.423 227.13 li
389.351 227.132 li
386.468 231.136 li
.620325 .296208 1 .115541 cmyk
f
384.728 233.846 mo
384.652 227.128 li
386.423 227.13 li
386.468 231.136 li
389.351 227.132 li
389.661 227.133 li
387.73 229.872 li
384.728 233.846 li
.624903 .306096 1 .126406 cmyk
f
383.294 227.485 mo
377.799 227.485 li
377.474 227.121 li
383.992 227.127 li
383.97 227.157 383.945 227.186 383.92 227.213 cv
383.755 227.386 383.527 227.485 383.294 227.485 cv
.622522 .297642 1 .117433 cmyk
f
383.002 235.361 mo
375.98 227.485 li
375.654 227.12 li
377.474 227.121 li
377.799 227.485 li
384.151 234.61 li
383.585 235.359 li
383.002 235.361 li
387.73 229.872 mo
389.661 227.133 li
389.799 227.133 li
387.73 229.872 li
.663111 .355413 1 .209751 cmyk
f
373.965 225.225 mo
335.067 225.225 li
28.1737 224.943 li
28.576 224.475 li
373.688 224.914 li
373.965 225.225 li
.544823 .248875 .884398 .0552682 cmyk
f
15.9524 224.932 mo
12.1047 224.928 li
12.5153 224.455 li
15.9524 224.459 li
15.9524 224.932 li
.582238 .27451 .982177 .0850538 cmyk
f
26.3866 224.941 mo
17.7234 224.933 li
17.7234 224.461 li
26.7896 224.473 li
26.3866 224.941 li
.579675 .272557 .967254 .0821546 cmyk
f
17.7234 224.933 mo
15.9524 224.932 li
15.9524 224.459 li
17.7234 224.461 li
17.7234 224.933 li
.582238 .27451 .982177 .0850538 cmyk
f
28.1737 224.943 mo
26.3866 224.941 li
26.7896 224.473 li
28.576 224.475 li
28.1737 224.943 li
12.1047 224.928 mo
11.3494 224.927 li
11.3501 224.453 li
12.5153 224.455 li
12.1047 224.928 li
.602594 .300389 1 .114839 cmyk
f
384.631 225.225 mo
384.179 225.225 li
384.179 224.928 li
384.627 224.928 li
384.631 225.225 li
.579736 .268772 .961425 .0780957 cmyk
f
390.332 225.225 mo
386.402 225.225 li
386.399 224.931 li
390.293 224.936 li
390.332 224.981 li
390.332 225.225 li
.582238 .27451 .982177 .0850538 cmyk
f
390.545 225.225 mo
390.332 225.225 li
390.332 224.981 li
390.545 225.225 li
386.402 225.225 mo
384.631 225.225 li
384.627 224.928 li
386.399 224.931 li
386.402 225.225 li
.584985 .277378 .981994 .0888685 cmyk
f
382.408 225.225 mo
375.784 225.225 li
375.509 224.917 li
382.408 224.926 li
382.408 225.225 li
.579675 .272557 .967254 .0821546 cmyk
f
384.179 225.225 mo
382.408 225.225 li
382.408 224.926 li
384.179 224.928 li
384.179 225.225 li
.582238 .27451 .982177 .0850538 cmyk
f
390.559 225.225 mo
390.545 225.225 li
390.332 224.981 li
390.293 224.936 li
390.501 224.936 li
390.559 225.225 li
375.784 225.225 mo
373.965 225.225 li
373.688 224.914 li
375.509 224.917 li
375.784 225.225 li
.602594 .300389 1 .114839 cmyk
f
335.026 227.082 mo
26.3339 227.082 li
24.5455 227.082 li
16.1078 227.082 li
11.6423 227.082 li
11.5022 227.082 li
11.48 227.082 li
11.3311 226.845 li
11.3348 226.825 11.3378 226.805 11.3403 226.784 cv
335.026 227.082 li
390.569 225.276 mo
335.067 225.225 li
373.965 225.225 li
375.784 225.225 li
382.408 225.225 li
384.179 225.225 li
384.631 225.225 li
386.402 225.225 li
390.332 225.225 li
390.545 225.225 li
390.559 225.225 li
390.569 225.276 li
.663111 .355413 1 .209751 cmyk
f
392.133 224.043 mo
392.088 223.819 li
392.085 223.805 392.082 223.791 392.079 223.777 cv
392.334 223.776 li
392.133 224.043 li
f
16.8379 237.286 mo
16.8355 236.358 li
383.585 235.359 li
392.334 223.776 li
9.69624 224.246 li
17.5771 236.775 li
16.8379 237.286 li
16.8355 236.358 li
16.8379 237.286 li
16.0987 237.798 li
7.31357 223.831 li
7.13477 223.547 7.1191 223.18 7.27282 222.88 cv
7.42667 222.58 7.72692 222.392 8.05172 222.391 cv
394.166 221.917 li
394.505 221.917 394.816 222.121 394.964 222.441 cv
395.112 222.761 395.071 223.144 394.861 223.422 cv
384.708 236.863 li
384.541 237.084 384.285 237.214 384.016 237.215 cv
16.8402 238.215 li
16.5412 238.216 16.2634 238.059 16.0987 237.798 cv
16.8379 237.286 li
1 /0 /CSD get_res sepcs
1 sep
f
50.3035 233.576 mo
224.33 233.576 li
225.163 228.312 li
48.6305 228.312 li
50.3035 233.576 li
.719081 .14258 0 0 cmyk
ef
50.3035 233.576 mo
50.3035 233.111 li
223.955 233.111 li
224.64 228.776 li
49.2447 228.776 li
50.7235 233.429 li
50.3035 233.576 li
50.3035 233.111 li
50.3035 233.576 li
49.8835 233.722 li
48.2105 228.458 li
48.1656 228.317 48.1883 228.161 48.2714 228.04 cv
48.3544 227.919 48.4884 227.847 48.6305 227.847 cv
225.163 227.847 li
225.292 227.847 225.416 227.908 225.5 228.011 cv
225.584 228.115 225.62 228.253 225.599 228.388 cv
224.767 233.652 li
224.732 233.875 224.547 234.04 224.33 234.04 cv
50.3035 234.04 li
50.1123 234.04 49.944 233.913 49.8835 233.722 cv
50.3035 233.576 li
1 /0 /CSD get_res sepcs
1 sep
f
291.259 236.774 mo
311.631 236.741 li
316.359 228.312 li
295.291 228.312 li
291.259 236.774 li
.719081 .14258 0 0 cmyk
ef
291.259 236.774 mo
291.258 236.309 li
311.377 236.277 li
315.585 228.776 li
295.565 228.776 li
291.655 236.981 li
291.259 236.774 li
291.258 236.309 li
291.259 236.774 li
290.863 236.566 li
294.895 228.104 li
294.97 227.947 295.123 227.847 295.291 227.847 cv
316.359 227.847 li
316.517 227.847 316.665 227.937 316.743 228.081 cv
316.822 228.225 316.821 228.404 316.74 228.547 cv
312.012 236.976 li
311.933 237.118 311.788 237.205 311.631 237.205 cv
291.26 237.238 li
291.106 237.238 290.964 237.155 290.883 237.018 cv
290.802 236.881 290.794 236.71 290.863 236.566 cv
291.259 236.774 li
1 /0 /CSD get_res sepcs
1 sep
f
8.09599 223.59 mo
10.4614 226.671 li
10.7536 24.1226 li
8.05276 20.9037 li
8.09599 223.59 li
.59765 .261906 1 .0757458 cmyk
ef
8.09599 223.59 mo
8.7857 223.008 li
9.57975 224.042 li
9.86759 24.4723 li
8.93876 23.3652 li
8.98147 223.59 li
8.09599 223.59 li
8.7857 223.008 li
8.09599 223.59 li
7.21053 223.591 li
7.1673 20.9038 li
7.1673 20.517 7.39494 20.1715 7.74011 20.0349 cv
8.08529 19.8983 8.47382 19.9998 8.71752 20.2902 cv
11.4183 23.5092 li
11.5608 23.6789 11.6395 23.8978 11.6391 24.1239 cv
11.3469 226.673 li
11.3463 227.065 11.1083 227.417 10.7552 227.547 cv
10.402 227.677 10.0064 227.559 9.77174 227.254 cv
7.4063 224.173 li
7.28027 224.009 7.21053 223.801 7.21053 223.591 cv
8.09599 223.59 li
1 /0 /CSD get_res sepcs
1 sep
f
392.21 226.932 mo
392.458 226.603 li
392.428 226.67 392.39 226.734 392.345 226.792 cv
392.305 226.844 392.259 226.891 392.21 226.932 cv
.750271 .679713 .658534 .901945 cmyk
f
375.654 227.12 mo
335.026 227.082 li
375.621 227.082 li
375.654 227.12 li
.741054 .667872 .668452 .88925 cmyk
f
384.652 227.128 mo
383.992 227.127 li
384.003 227.113 384.013 227.098 384.023 227.082 cv
384.652 227.082 li
384.652 227.128 li
.738766 .66125 .673213 .884031 cmyk
f
389.351 227.132 mo
386.423 227.13 li
386.423 227.082 li
389.387 227.082 li
389.351 227.132 li
.739925 .66363 .671382 .886046 cmyk
f
389.661 227.133 mo
389.351 227.132 li
389.387 227.082 li
389.696 227.082 li
389.661 227.133 li
386.423 227.13 mo
384.652 227.128 li
384.652 227.082 li
386.423 227.082 li
386.423 227.13 li
f
383.992 227.127 mo
377.474 227.121 li
377.439 227.082 li
384.023 227.082 li
384.013 227.098 384.003 227.113 383.992 227.127 cv
f
389.799 227.133 mo
389.661 227.133 li
389.696 227.082 li
389.837 227.082 li
389.799 227.133 li
377.474 227.121 mo
375.654 227.12 li
375.621 227.082 li
377.439 227.082 li
377.474 227.121 li
.742061 .669276 .666987 .890684 cmyk
f
373.688 224.914 mo
28.576 224.475 li
28.5973 224.45 li
373.274 224.45 li
373.688 224.914 li
.739162 .66009 .673365 .883268 cmyk
f
15.9524 224.459 mo
12.5153 224.455 li
12.519 224.45 li
15.9524 224.45 li
15.9524 224.459 li
.738643 .661067 .673396 .883879 cmyk
f
26.7896 224.473 mo
17.7234 224.461 li
17.7234 224.45 li
26.8089 224.45 li
26.7896 224.473 li
.73843 .663905 .672084 .885496 cmyk
f
17.7234 224.461 mo
15.9524 224.459 li
15.9524 224.45 li
17.7234 224.45 li
17.7234 224.461 li
.738643 .661067 .673396 .883879 cmyk
f
28.576 224.475 mo
26.7896 224.473 li
26.8089 224.45 li
28.5973 224.45 li
28.576 224.475 li
12.5153 224.455 mo
11.3501 224.453 li
11.3501 224.45 li
12.519 224.45 li
12.5153 224.455 li
.739864 .66601 .670161 .88748 cmyk
f
384.627 224.928 mo
384.179 224.928 li
384.179 224.45 li
384.622 224.45 li
384.627 224.928 li
.740566 .662715 .671199 .885527 cmyk
f
390.293 224.936 mo
386.399 224.931 li
386.393 224.45 li
389.871 224.45 li
390.293 224.936 li
.738643 .661067 .673396 .883879 cmyk
f
386.399 224.931 mo
384.627 224.928 li
384.622 224.45 li
386.393 224.45 li
386.399 224.931 li
f
382.408 224.926 mo
375.509 224.917 li
375.093 224.45 li
382.408 224.45 li
382.408 224.926 li
.73843 .663905 .672084 .885496 cmyk
f
384.179 224.928 mo
382.408 224.926 li
382.408 224.45 li
384.179 224.45 li
384.179 224.928 li
.738643 .661067 .673396 .883879 cmyk
f
390.773 225.225 mo
390.559 225.225 li
390.501 224.936 li
390.293 224.936 li
389.871 224.45 li
390.773 224.45 li
390.773 225.225 li
375.509 224.917 mo
373.688 224.914 li
373.274 224.45 li
375.093 224.45 li
375.509 224.917 li
.739864 .66601 .670161 .88748 cmyk
f
335.067 225.225 mo
27.9309 225.225 li
28.1737 224.943 li
335.067 225.225 li
.739162 .66009 .673365 .883268 cmyk
f
15.9524 225.225 mo
11.847 225.225 li
12.1047 224.928 li
15.9524 224.932 li
15.9524 225.225 li
.738643 .661067 .673396 .883879 cmyk
f
26.1424 225.225 mo
17.7234 225.225 li
17.7234 224.933 li
26.3866 224.941 li
26.1424 225.225 li
.73843 .663905 .672084 .885496 cmyk
f
17.7234 225.225 mo
15.9524 225.225 li
15.9524 224.932 li
17.7234 224.933 li
17.7234 225.225 li
.738643 .661067 .673396 .883879 cmyk
f
27.9309 225.225 mo
26.1424 225.225 li
26.3866 224.941 li
28.1737 224.943 li
27.9309 225.225 li
11.847 225.225 mo
11.349 225.225 li
11.3494 224.927 li
12.1047 224.928 li
11.847 225.225 li
.739864 .66601 .670161 .88748 cmyk
f
389.837 227.082 mo
389.696 227.082 li
389.387 227.082 li
386.423 227.082 li
384.652 227.082 li
384.023 227.082 li
377.439 227.082 li
375.621 227.082 li
335.026 227.082 li
11.3403 226.784 li
11.3446 226.748 11.3468 226.71 11.3469 226.673 cv
11.349 225.225 li
11.847 225.225 li
15.9524 225.225 li
17.7234 225.225 li
26.1424 225.225 li
27.9309 225.225 li
335.067 225.225 li
390.569 225.276 li
390.559 225.225 li
390.773 225.225 li
390.773 224.45 li
391.825 224.45 li
389.837 227.082 li
.742061 .669276 .666987 .890684 cmyk
f
391.825 224.45 mo
390.773 224.45 li
389.871 224.45 li
386.393 224.45 li
384.622 224.45 li
384.179 224.45 li
382.408 224.45 li
375.093 224.45 li
373.274 224.45 li
28.5973 224.45 li
26.8089 224.45 li
17.7234 224.45 li
15.9524 224.45 li
12.519 224.45 li
11.3501 224.45 li
11.3504 224.244 li
392.079 223.777 li
392.082 223.791 392.085 223.805 392.088 223.819 cv
392.133 224.043 li
391.825 224.45 li
f
391.658 227.134 mo
391.658 227.134 391.658 227.134 391.657 227.134 cv
389.799 227.133 li
389.837 227.082 li
391.825 224.45 li
392.133 224.043 li
392.525 226.016 li
392.565 226.215 392.54 226.422 392.458 226.603 cv
392.21 226.932 li
392.054 227.062 391.86 227.134 391.658 227.134 cv
11.3504 224.244 mo
11.3528 222.596 li
391.222 223.08 li
391.628 223.08 391.979 223.368 392.079 223.777 cv
11.3504 224.244 li
.750271 .679713 .654902 .901945 cmyk
f
9.57975 224.042 mo
8.9814 223.263 li
8.98125 222.593 li
9.58184 222.594 li
9.57975 224.042 li
.738643 .661067 .673396 .883879 cmyk
f
11.3403 226.784 mo
10.1437 226.783 li
9.85349 226.783 9.58445 226.636 9.41833 226.386 cv
9.41833 226.386 li
7.8647 224.053 li
7.67546 223.768 7.65287 223.398 7.8058 223.091 cv
7.95871 222.784 8.26073 222.592 8.59074 222.592 cv
8.59109 222.592 8.59142 222.592 8.59176 222.592 cv
8.98125 222.593 li
8.9814 223.263 li
9.57975 224.042 li
9.58184 222.594 li
11.3528 222.596 li
11.3504 224.244 li
11.3501 224.45 li
11.3501 224.453 li
10.2902 224.452 li
10.6065 224.927 li
11.3494 224.927 li
11.349 225.225 li
11.3469 226.673 li
11.3468 226.71 11.3446 226.748 11.3403 226.784 cv
.750271 .679713 .654902 .901945 cmyk
f
126.393 22.4846 mo
116.45 22.4846 li
116.45 21.7097 li
126.393 21.7097 li
126.393 22.4846 li
82.0489 22.4846 mo
10.5587 22.4846 li
9.90844 21.7096 li
82.0489 21.7096 li
82.0489 22.4846 li
392.544 22.2281 mo
392.544 21.7097 li
393.127 21.7097 li
392.544 22.2281 li
.578271 .34519 .807217 .147189 cmyk
f
114.679 22.4846 mo
83.8198 22.4846 li
83.8198 21.7096 li
114.679 21.7097 li
114.679 22.4846 li
.757504 .38407 .836698 .293828 cmyk
f
116.45 22.4846 mo
114.679 22.4846 li
114.679 21.7097 li
116.45 21.7097 li
116.45 22.4846 li
83.8198 22.4846 mo
82.0489 22.4846 li
82.0489 21.7096 li
83.8198 21.7096 li
83.8198 22.4846 li
.703212 .489876 1 .524834 cmyk
f
390.773 22.4847 mo
128.164 22.4846 li
128.164 21.7097 li
390.773 21.7097 li
390.773 22.4847 li
.757504 .38407 .836698 .293828 cmyk
f
390.931 22.4847 mo
390.773 22.4847 li
390.773 21.7097 li
392.544 21.7097 li
392.544 22.2281 li
392.334 22.4142 li
392.215 22.267 392.052 22.1583 391.863 22.1111 cv
391.794 22.094 391.725 22.0858 391.657 22.0858 cv
391.369 22.0858 391.097 22.2337 390.931 22.4847 cv
128.164 22.4846 mo
126.393 22.4846 li
126.393 21.7097 li
128.164 21.7097 li
128.164 22.4846 li
.703212 .489876 1 .524834 cmyk
f
392.109 22.6142 mo
391.973 22.5305 391.817 22.4847 391.659 22.4847 cv
390.931 22.4847 li
391.097 22.2337 391.369 22.0858 391.657 22.0858 cv
391.725 22.0858 391.794 22.094 391.863 22.1111 cv
392.052 22.1583 392.215 22.267 392.334 22.4142 cv
392.109 22.6142 li
f
11.0913 23.1194 mo
10.5587 22.4846 li
82.0489 22.4846 li
83.8198 22.4846 li
114.679 22.4846 li
116.45 22.4846 li
126.393 22.4846 li
128.164 22.4846 li
390.773 22.4847 li
390.931 22.4847 li
391.659 22.4847 li
391.817 22.4847 391.973 22.5305 392.109 22.6142 cv
391.658 23.0146 li
11.0913 23.1194 li
f
393.127 21.7097 mo
392.544 21.7097 li
390.773 21.7097 li
128.164 21.7097 li
126.393 21.7097 li
116.45 21.7097 li
114.679 21.7097 li
83.8198 21.7096 li
82.0489 21.7096 li
9.90844 21.7096 li
8.79101 20.3778 li
394.167 20.7861 li
393.127 21.7097 li
f
9.91187 23.1197 mo
8.47095 20.3775 li
8.79101 20.3778 li
9.90844 21.7096 li
10.5587 22.4846 li
11.0913 23.1194 li
9.91187 23.1197 li
f
9.91184 23.1197 mo
391.658 23.0145 li
394.167 20.7861 li
8.4709 20.3775 li
9.91184 23.1197 li
cp
1 /0 /CSD get_res sepcs
1 sep
3 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
gsave
[.590305 8.0874e-8 -1.76588e-8 -.619017 2.35181 238.804 ]ct
@
grestore newpath
391.658 226.56 mo
394.191 223.048 li
394.315 20.7861 li
391.806 23.0517 li
391.658 226.56 li
cp
.694362 .425238 1 .353582 cmyk
ef
391.658 226.56 mo
394.191 223.048 li
394.315 20.7861 li
391.806 23.0517 li
391.658 226.56 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
[.590305 8.0874e-8 -1.76588e-8 -.619017 2.35181 238.804 ]ct
@
grestore newpath
52.8135 178.017 mo
349.826 178.017 li
349.826 73.0194 li
52.8135 73.0193 li
cp
gsave
[.590305 8.0874e-8 -1.76588e-8 -.619017 2.35181 238.804 ]ct
@
grestore newpath
10.1444 23.0145 mo
51.7751 71.8921 li
gsave
[.590305 8.0874e-8 -1.76588e-8 -.619017 2.35181 238.804 ]ct
@
grestore newpath
52.8135 177.425 mo
10.9555 225.218 li
gsave
[.590305 8.0874e-8 -1.76588e-8 -.619017 2.35181 238.804 ]ct
@
grestore newpath
349.811 71.6755 mo
391.658 24.5188 li
gsave
[.590305 8.0874e-8 -1.76588e-8 -.619017 2.35181 238.804 ]ct
@
grestore newpath
349.41 177.425 mo
363.495 193.021 377.574 208.619 391.658 224.218 cv
gsave
[.590305 8.0874e-8 -1.76588e-8 -.619017 2.35181 238.804 ]ct
@
grestore newpath
grestore
HETXEF+Calibri*1 [10.56 0 0 -10.56 0 0 ]msf
398.632 238.804 mo
( )sh
HETXEF+Calibri*1 [10.56 0 0 -10.56 0 0 ]msf
2.31581 256.444 mo
( )sh
HETXEF+Calibri*1 [10.56 0 0 -10.56 0 0 ]msf
2.31581 272.044 mo
( )sh
gsave
2.35179 507.954 mo
398.588 507.954 li
398.588 278.547 li
2.35179 278.547 li
2.35179 507.954 li
clp
385.383 325.5 mo
385.383 456.841 li
389.569 452.755 li
389.569 322.003 li
385.383 325.5 li
cp
.719081 .14258 0 0 cmyk
ef
385.383 325.5 mo
385.383 456.841 li
389.569 452.755 li
389.569 322.003 li
385.383 325.5 li
cp
1 /0 /CSD get_res sepcs
1 sep
1.5 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
gsave
[.590305 4.0437e-8 -1.81937e-8 -.61667 2.35181 507.954 ]ct
@
grestore newpath
10.9809 318.624 mo
11.1485 447.107 li
15.1644 452.755 li
15.1644 327.368 li
10.9809 318.624 li
cp
.719081 .14258 0 0 cmyk
ef
10.9809 318.624 mo
11.1485 447.107 li
15.1644 452.755 li
15.1644 327.368 li
10.9809 318.624 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
[.590305 4.0437e-8 -1.81937e-8 -.61667 2.35181 507.954 ]ct
@
grestore newpath
385.614 492.843 mo
391.215 485.092 li
391.658 282.789 li
383.435 299.976 li
385.614 492.843 li
cp
3 lw
gsave
[.590305 4.0437e-8 -1.81937e-8 -.61667 2.35181 507.954 ]ct
@
grestore newpath
10.1444 483.815 mo
16.8379 496.052 li
16.7688 300.093 li
10.1444 282.789 li
10.1444 483.815 li
cp
.75075 lw
gsave
[.590305 4.0437e-8 -1.81937e-8 -.61667 2.35181 507.954 ]ct
@
grestore newpath
16.8379 485.563 mo
383.294 485.563 li
383.294 300.273 li
16.8379 300.273 li
cp
1 /0 /CSD get_res sepcs
.153 sep
ef
16.8379 485.563 mo
383.294 485.563 li
383.294 300.273 li
16.8379 300.273 li
cp
1 /0 /CSD get_res sepcs
.851 sep
3 lw
gsave
[.590305 4.0437e-8 -1.81937e-8 -.61667 2.35181 507.954 ]ct
@
grestore newpath
16.8379 496.052 mo
59.0884 447.107 li
52.3955 436.618 li
10.1444 485.162 li
16.8379 496.052 li
cp
1 /0 /CSD get_res sepcs
1 sep
2.25 lw
gsave
[.590305 4.0437e-8 -1.81937e-8 -.61667 2.35181 507.954 ]ct
@
grestore newpath
17.172 300.673 mo
383.595 300.056 li
391.658 283.19 li
10.1444 283.19 li
17.172 300.673 li
cp
.75075 lw
gsave
[.590305 4.0437e-8 -1.81937e-8 -.61667 2.35181 507.954 ]ct
@
grestore newpath
16.8379 300.272 mo
59.0884 349.217 li
52.3955 332.203 li
10.1444 283.19 li
16.8379 300.272 li
cp
2.25 lw
gsave
[.590305 4.0437e-8 -1.81937e-8 -.61667 2.35181 507.954 ]ct
@
grestore newpath
59.0884 447.107 mo
341.461 447.107 li
341.461 349.216 li
59.0884 349.216 li
cp
1 /0 /CSD get_res sepcs
.851 sep
3 lw
gsave
[.590305 4.0437e-8 -1.81937e-8 -.61667 2.35181 507.954 ]ct
@
grestore newpath
349.41 331.734 mo
391.658 283.19 li
383.294 300.272 li
341.459 349.217 li
349.41 331.734 li
cp
1 /0 /CSD get_res sepcs
1 sep
2.25 lw
gsave
[.590305 4.0437e-8 -1.81937e-8 -.61667 2.35181 507.954 ]ct
@
grestore newpath
341.459 446.901 mo
384.344 494.818 li
391.658 484.481 li
349.41 436.149 li
341.459 446.901 li
cp
gsave
[.590305 4.0437e-8 -1.81937e-8 -.61667 2.35181 507.954 ]ct
@
grestore newpath
52.3955 436.149 mo
349.408 436.149 li
349.408 332.203 li
52.3955 332.203 li
cp
3 lw
gsave
[.590305 4.0437e-8 -1.81937e-8 -.61667 2.35181 507.954 ]ct
@
grestore newpath
58.3594 348.372 mo
342.185 348.372 li
349.823 331.734 li
51.977 331.734 li
58.3594 348.372 li
cp
.75075 lw
gsave
[.590305 4.0437e-8 -1.81937e-8 -.61667 2.35181 507.954 ]ct
@
grestore newpath
52.3955 436.618 mo
58.6705 445.356 li
59.0884 353.583 li
52.8135 332.61 li
52.3955 436.618 li
cp
gsave
[.590305 4.0437e-8 -1.81937e-8 -.61667 2.35181 507.954 ]ct
@
grestore newpath
59.0884 446.231 mo
341.86 446.355 li
349.823 436.618 li
51.977 436.618 li
59.0884 446.231 li
cp
gsave
[.590305 4.0437e-8 -1.81937e-8 -.61667 2.35181 507.954 ]ct
@
grestore newpath
341.459 447.107 mo
349.823 436.149 li
349.823 331.734 li
341.459 349.217 li
341.459 447.107 li
cp
gsave
[.590305 4.0437e-8 -1.81937e-8 -.61667 2.35181 507.954 ]ct
@
grestore newpath
93.8432 300.272 mo
115.561 300.272 li
112.125 284.017 li
90.4608 284.017 li
93.8432 300.272 li
cp
.719081 .14258 0 0 cmyk
ef
93.8432 300.272 mo
115.561 300.272 li
112.125 284.017 li
90.4608 284.017 li
93.8432 300.272 li
cp
1 /0 /CSD get_res sepcs
1 sep
1.5 lw
gsave
[.590305 4.0437e-8 -1.81937e-8 -.61667 2.35181 507.954 ]ct
@
grestore newpath
175.382 293.279 mo
348.572 293.279 li
350.662 284.541 li
174.131 284.541 li
175.382 293.279 li
cp
.719081 .14258 0 0 cmyk
ef
175.382 293.279 mo
348.572 293.279 li
350.661 284.541 li
174.131 284.541 li
175.382 293.279 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
[.590305 4.0437e-8 -1.81937e-8 -.61667 2.35181 507.954 ]ct
@
grestore newpath
10.1444 485.162 mo
391.659 485.162 li
391.659 283.19 li
10.1444 283.19 li
cp
3 lw
gsave
[.590305 4.0437e-8 -1.81937e-8 -.61667 2.35181 507.954 ]ct
@
grestore newpath
8.05279 482.54 mo
394.166 482.54 li
394.166 280.568 li
8.05279 280.568 li
cp
gsave
[.590305 4.0437e-8 -1.81937e-8 -.61667 2.35181 507.954 ]ct
@
grestore newpath
16.8379 496.252 mo
384.014 495.256 li
394.167 481.866 li
8.05279 482.339 li
16.8379 496.252 li
cp
gsave
[.590305 4.0437e-8 -1.81937e-8 -.61667 2.35181 507.954 ]ct
@
grestore newpath
50.3035 492.555 mo
224.33 492.555 li
225.163 487.311 li
48.6306 487.311 li
50.3035 492.555 li
cp
.719081 .14258 0 0 cmyk
ef
50.3035 492.555 mo
224.33 492.555 li
225.163 487.311 li
48.6306 487.311 li
50.3035 492.555 li
cp
1 /0 /CSD get_res sepcs
1 sep
1.5 lw
gsave
[.590305 4.0437e-8 -1.81937e-8 -.61667 2.35181 507.954 ]ct
@
grestore newpath
291.259 495.741 mo
311.631 495.708 li
316.359 487.311 li
295.291 487.311 li
291.259 495.741 li
cp
.719081 .14258 0 0 cmyk
ef
291.259 495.741 mo
311.63 495.708 li
316.359 487.311 li
295.291 487.311 li
291.259 495.741 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
[.590305 4.0437e-8 -1.81937e-8 -.61667 2.35181 507.954 ]ct
@
grestore newpath
8.09601 482.608 mo
10.4614 485.677 li
10.7536 283.899 li
8.0528 280.693 li
8.09601 482.608 li
cp
.59765 .261906 1 .0757458 cmyk
ef
8.096 482.608 mo
10.4614 485.677 li
10.7536 283.899 li
8.05279 280.693 li
8.096 482.608 li
cp
1 /0 /CSD get_res sepcs
1 sep
3 lw
gsave
[.590305 4.0437e-8 -1.81937e-8 -.61667 2.35181 507.954 ]ct
@
grestore newpath
9.91184 282.9 mo
391.658 282.789 li
394.167 280.569 li
8.4709 280.169 li
9.91184 282.9 li
cp
gsave
[.590305 4.0437e-8 -1.81937e-8 -.61667 2.35181 507.954 ]ct
@
grestore newpath
391.658 485.567 mo
394.191 482.067 li
394.315 280.569 li
391.806 282.833 li
391.658 485.567 li
cp
.694362 .425238 1 .353582 cmyk
ef
391.658 485.567 mo
394.191 482.067 li
394.315 280.569 li
391.806 282.833 li
391.658 485.567 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
[.590305 4.0437e-8 -1.81937e-8 -.61667 2.35181 507.954 ]ct
@
grestore newpath
52.8135 437.21 mo
349.826 437.21 li
349.826 332.61 li
52.8135 332.61 li
cp
gsave
[.590305 4.0437e-8 -1.81937e-8 -.61667 2.35181 507.954 ]ct
@
grestore newpath
10.1444 282.789 mo
51.7751 331.482 li
gsave
[.590305 4.0437e-8 -1.81937e-8 -.61667 2.35181 507.954 ]ct
@
grestore newpath
52.8135 436.618 mo
10.9555 484.229 li
gsave
[.590305 4.0437e-8 -1.81937e-8 -.61667 2.35181 507.954 ]ct
@
grestore newpath
349.811 331.272 mo
391.658 284.288 li
gsave
[.590305 4.0437e-8 -1.81937e-8 -.61667 2.35181 507.954 ]ct
@
grestore newpath
349.41 436.618 mo
363.495 452.155 377.574 467.693 391.658 483.232 cv
gsave
[.590305 4.0437e-8 -1.81937e-8 -.61667 2.35181 507.954 ]ct
@
grestore newpath
10.1444 499.023 mo
274.524 499.023 li
274.524 485.563 li
10.1444 485.563 li
cp
gsave
[.590305 4.0437e-8 -1.81937e-8 -.61667 2.35181 507.954 ]ct
@
grestore newpath
288.331 506.54 mo
320.961 506.54 li
320.961 485.563 li
288.331 485.563 li
cp
gsave
[.590305 4.0437e-8 -1.81937e-8 -.61667 2.35181 507.954 ]ct
@
grestore newpath
grestore
HETXEF+Calibri*1 [10.56 0 0 -10.56 0 0 ]msf
398.632 508.014 mo
( )sh
HETXEF+Calibri*1 [10.56 0 0 -10.56 0 0 ]msf
2.31581 521.694 mo
( )sh
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
/HETXEF+Calibri*1 uf
/HETXEF+Calibri uf
/HIBBAA+Calibri uf
/HETXEE+#e5#ae#8b#e4#bd#93-GBK-EUC-H-Identity-H uf
/HETXEE+#e5#ae#8b#e4#bd#93-GBK-EUC-H /CIDFont ur
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
